<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.com.adm.system.dao.SystemDAO">
	
	<!-- 메뉴 가져오기 -->
	<select id="selectMenuList" parameterType="egovframework.com.adm.system.vo.Menu" resultType="egovframework.com.adm.system.vo.Menu">
		SELECT 
				T1.MENU_NO,
				T1.MENU_URL,
				T1.P_MENU_CD,
				T1.MENU_CD,
				T1.MENU_NAME,
				T1.MENU_URL,
				T1.MENU_LEVEL,
				T1.MODULE_TYPE,
				T1.LEARNING_TYPE,
				T1.USE_YN,
				T1.MENU_ORDER,
				T1.LANGUAGE_CODE,
				(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_ID
		FROM XBT_STU_MENU T1 
		WHERE T1.LANGUAGE_CODE =  #{languageCode}
		AND USE_YN = 'Y'
	</select>	
	
	<!-- 메뉴 상세 -->
	<select id="selectMenu" parameterType="egovframework.com.adm.system.vo.Menu" resultType="egovframework.com.adm.system.vo.Menu">
		SELECT 
				T1.MENU_NO,
				T1.MENU_URL,
				T1.P_MENU_CD,
				T1.MENU_CD,
				T1.MENU_NAME,
				T1.MENU_URL,
				T1.MENU_LEVEL,
				T1.MODULE_TYPE,
				T1.LEARNING_TYPE,
				T1.USE_YN,
				T1.MENU_ORDER,
				T1.LANGUAGE_CODE,
				(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_ID
		FROM XBT_STU_MENU T1 
		WHERE T1.LANGUAGE_CODE =  #{languageCode}
		AND T1.MENU_CD = #{menuCd}		
	</select>		
	
	<!-- 메뉴 등록 -->
	<insert id="insertMenu" parameterType="egovframework.com.adm.system.vo.Menu">
		INSERT	INTO XBT_STU_MENU(
			P_MENU_CD,
			MENU_CD,
			MENU_NAME,
			MENU_URL,
			MENU_LEVEL,
			USE_YN,
			MENU_ORDER,
			LANGUAGE_CODE,
			MODULE_TYPE,
			LEARNING_TYPE,
			INSERT_ID,
			INSERT_DATE
		)VALUES(
			#{pmenuCd}
			,#{menuCd}
			,#{menuName}
			,#{menuUrl}
			,'1'
			,'Y'
			,#{menuOrder}
			,#{languageCode}
			,#{moduleType}
			,#{learningType}
			,#{insertId}
			,now()
		)

	</insert>	
	
	
	<!-- 메뉴 수정 -->
	<update id="updateMenu" parameterType="egovframework.com.adm.system.vo.Menu">	
		UPDATE XBT_STU_MENU
		SET 
			P_MENU_CD = #{pmenuCd}
			, MENU_CD = #{menuCd}
			, MENU_NAME = #{menuName}
			, USE_YN = #{useYn}
			, MENU_ORDER = #{menuOrder}
			, MODULE_TYPE = #{moduleType}
			, LEARNING_TYPE = #{learningType}
			, UPDATE_ID = #{updateId}
			, UPDATE_DATE = now()
		WHERE MENU_CD = #{menuCd}
		AND LANGUAGE_CODE = #{languageCode}

	</update>	
	
	<!-- 메뉴 삭제-->
	<delete id="deleteMenu" parameterType="egovframework.com.adm.system.vo.Menu">
		DELETE FROM XBT_STU_MENU 
		WHERE MENU_CD = #{menuCd}
		AND LANGUAGE_CODE = #{languageCode}
	</delete>	
	
	<!-- 모듈적용메뉴가져오기 -->
	<select id="selectModuleMenuList" parameterType="egovframework.com.adm.system.vo.Menu" resultType="egovframework.com.adm.system.vo.Menu">
		SELECT 
		   '' AS moduleId,
		   '' AS moduleNm,         
		   MENU_CD,
		   MENU_NAME,
		   MODULE_TYPE,
		   LEARNING_TYPE
		FROM XBT_STU_MENU T1
		WHERE LANGUAGE_CODE = 'kr'
		AND USE_YN = 'Y'
		ORDER BY P_MENU_CD, MENU_ORDER ASC
	</select>		
	
	<!-- 모듈적용메뉴가져오기 단건 -->
	<select id="selectModuleMenu" parameterType="egovframework.com.adm.system.vo.Menu" resultType="egovframework.com.adm.system.vo.Menu">
		SELECT 
		   MENU_CD,
		   MENU_NAME,
		   MODULE_TYPE,
		   LEARNING_TYPE
		FROM XBT_STU_MENU T1
		WHERE LANGUAGE_CODE = 'kr'
		AND USE_YN = 'Y'
		AND MENU_CD = #{menuCd}
	</select>		
	
	
	<!-- 평가대상 교육생 목록 -->
	<select id="selectXbtEndingUserList" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT
			PROC_CD,
			PROC_YEAR,
			PROC_SEQ,
			EDU_CODE,
			EDU_NAME,
			USER_ID,
			USER_NM,
			PROC_NM,
			COMP_NM,
			DEPT_NM,
			GAIN_SCORE,
			PRACTICE_SCORE,
			PRACTICE_YN,
			THEORY_SCORE,
			THEORY_YN,
			EVALUATION_SCORE,
			EVALUATION_YN,
			PASS_YN,
			ENDING_PROCESS_DATE,
			EDU_START_DATE,
			EDU_END_DATE,
			ENDING_YN,
			THEORY_PASS_YN,
			PRACTICE_PASS_YN,
			EVALUATION_PASS_YN,
			DANGER_PASS_YN
		FROM
			XBT_BASELINE_STUDENT_INFO
		WHERE
			ENDING_YN = 'N' OR ENDING_YN = 'ING'
	</select>	
	
	<!-- 평가대상 교육생 -->
	<select id="selectXbtEndingUser" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT
			PROC_CD,
			PROC_YEAR,
			PROC_SEQ,
			EDU_CODE,
			EDU_NAME,
			USER_ID,
			USER_NM,
			PROC_NM,
			COMP_NM,
			DEPT_NM,
			GAIN_SCORE,
			PRACTICE_SCORE,
			PRACTICE_YN,
			THEORY_SCORE,
			THEORY_YN,
			DANGER_SCORE,
			DANGER_YN,
			EVALUATION_SCORE,
			EVALUATION_YN,
			PASS_YN,
			ENDING_PROCESS_DATE,
			EDU_START_DATE,
			EDU_END_DATE,
			ENDING_YN,
			THEORY_PASS_YN,
			PRACTICE_PASS_YN,
			EVALUATION_PASS_YN,
			DANGER_PASS_YN
		FROM
			XBT_BASELINE_STUDENT_INFO
		WHERE
			USER_ID = #{userId}
			AND PROC_CD = #{procCd}
	</select>			
	
	<!-- 이론평가 점수비중 정보 -->
	<select id="selectTheoryScore" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT USER_ID ,
			IFNULL(GAIN_SCORE, 0)AS gainScore,
			IFNULL(DANGER_SCORE, 0)AS dangerScore
		FROM XBT_BASELINE_THEORY 
		WHERE PROC_CD = #{procCd} 
		AND USER_ID = #{userId} 
		AND END_YN = 'Y' 
		ORDER BY TRY_SEQ DESC 
		LIMIT 1
	</select>		
		
	
	<!-- XBT평가 점수비중 정보 -->
	<select id="selectEvaluationScore" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT USER_ID ,IFNULL(GAIN_SCORE, 0)AS gainScore  FROM XBT_BASELINE_EVALUATION 
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId} AND END_YN = 'Y' ORDER BY TRY_SEQ DESC LIMIT 1
	</select>	
	
	<!-- 실습 점수비중 정보 -->
	<select id="selectPracticeScore" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT 
			USER_ID ,
			IFNULL(PRACTICE_SCORE, 0)AS practiceScore,
			IFNULL(PRACTICE_CAR_SCORE, 0)AS practiceCarScore,
			IFNULL(PRACTICE_HUMAN_SCORE, 0)AS practiceHumanScore
		FROM XBT_BASELINE_STUDENT_INFO 
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId} AND PRACTICE_YN = 'Y' LIMIT 1
	</select>		
	
	<!-- 최종 점수 처리-->
	<update id="updateXbtScore" parameterType="egovframework.com.adm.system.vo.XbtScore">
		<choose>
			<when test='command == "theory"'>
				UPDATE 
					XBT_BASELINE_STUDENT_INFO
				SET 
				THEORY_YN = 'Y',
				THEORY_SCORE = #{theoryScore},
				UPDATE_DATE = now(),
				UPDATE_ID = 'system'
				WHERE PROC_CD = #{procCd} 
				AND USER_ID = #{userId} 
			</when>
			<when test='command == "evaluation"'>
				UPDATE 
					XBT_BASELINE_STUDENT_INFO
				SET 
				EVALUATION_YN = 'Y',
				EVALUATION_SCORE = #{evaluationScore},
				UPDATE_DATE = now(),
				UPDATE_ID = 'system'
				WHERE PROC_CD = #{procCd} 
				AND USER_ID = #{userId} 			
			</when>
			<when test='command == "danger"'>
				UPDATE 
					XBT_BASELINE_STUDENT_INFO
				SET 
				DANGER_YN = 'Y',
				DANGER_SCORE = #{dangerScore},
				UPDATE_DATE = now(),
				UPDATE_ID = 'system'
				WHERE PROC_CD = #{procCd} 
				AND USER_ID = #{userId} 
			</when>			
		</choose>
	
	</update>	

	<!-- 교육생첨수처리현황 -->
	<select id="selectProcessScore" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT THEORY_YN, EVALUATION_YN, PRACTICE_YN, DANGER_YN  FROM XBT_BASELINE_STUDENT_INFO
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
	</select>		
	
	<!-- 교육생첨수처리현황(이론특화) 항공경비 초기교육 (4일 / 30시간) , 항공경비 인증평가교육 (1일 / 4시간) -->
	<select id="selectTheoryProcessScore" parameterType="egovframework.com.adm.system.vo.XbtScore" resultType="egovframework.com.adm.system.vo.XbtScore">
		SELECT THEORY_YN, EVALUATION_YN, PRACTICE_YN, DANGER_YN  FROM XBT_BASELINE_STUDENT_INFO
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		<choose>
			<when test='eduList != null'>
				AND EDU_CODE IN
				  <foreach item="item" index="index" collection="eduList" open="(" separator="," close=")">
				        #{item}
				  </foreach>			
			</when>
		</choose>			
	</select>
	
	<!-- 최종 점수 처리-->
	<update id="updateXbtEndScore" parameterType="egovframework.com.adm.system.vo.XbtScore">
		UPDATE XBT_BASELINE_STUDENT_INFO SET
			GAIN_SCORE = #{gainScore},
			ENDING_YN = #{endingYn},
			PASS_YN = #{passYn},
			ENDING_PROCESS_DATE = now(),			
			UPDATE_DATE = now(),
			UPDATE_ID = 'system'		
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
	</update>	
	
	<!--학습데이터 일정종료처리-->
	<update id="updateLearningStatus" parameterType="egovframework.com.adm.system.vo.XbtScore">			
		<![CDATA[	
			UPDATE XBT_STU_LEARNING_PROGRESSING
			SET END_YN = 'Y'
			WHERE USER_ID IN (
					SELECT
						DISTINCT USER_ID
					FROM
						XBT_BASELINE_STUDENT_INFO
					WHERE
						ENDING_YN = 'N' OR ENDING_YN = 'ING'
			) AND INSERT_DATE <> date_format(NOW(), '%Y-%m-%d') AND END_YN = 'N'
		]]>
	</update>
		
	
	<!--일정종료처리-->
	<update id="updateBaselineStatus" parameterType="egovframework.com.adm.system.vo.XbtScore">			
		UPDATE XBT_BASELINE_STUDENT_INFO            
		SET ENDING_YN = 'Y'
		WHERE ENDING_YN = 'N'
		AND date_format(NOW(), '%Y-%m-%d') > EDU_END_DATE	
	</update>
	
	<!--가방엑셀데이터처리-->
	<update id="updateXrayExcelData" parameterType="egovframework.com.adm.contents.vo.XrayContents">		
		UPDATE 
			XBT_BAG_INFO 
		SET 
			ACTION_DIV_NAME = #{actionDivName}, 
			OPEN_YN = #{openYn},
			PASS_YN = #{passYn}, 
			ACTION_DIV = #{actionDiv}, 
			UNIT_NAME= #{unitName}, 
			UNIT_GROUP_CD = #{unitGroupCd}, 
			STUDY_LVL = #{studyLvl} 
		WHERE BAG_SCAN_ID = #{bagScanId} 
	</update>	
	
	

	
	<!-- 평가, 이론 백업테이블 동기화 -->
	<update id="updateEvaluationProgressingBackup" parameterType="egovframework.com.adm.system.vo.XbtScore">	
		INSERT INTO XBT_STU_EVALUATION_PROGRESSING_BACKUP (PROGRESS_NO, MODULE_ID, PROC_CD, PROC_YEAR, PROC_SEQ, TRY_SEQ, STUDY_LVL, USER_ID, BAG_SCAN_ID, UNIT_ID, ACTION_DIV, USER_ACTION_DIV, GAIN_SCORE, END_YN, INSERT_DATE)
		SELECT 
		    PROGRESS_NO, MODULE_ID, PROC_CD, PROC_YEAR, PROC_SEQ, TRY_SEQ, STUDY_LVL, USER_ID, BAG_SCAN_ID, UNIT_ID, ACTION_DIV, USER_ACTION_DIV, GAIN_SCORE, END_YN, INSERT_DATE
		FROM XBT_STU_EVALUATION_PROGRESSING
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		ON DUPLICATE KEY UPDATE
		    PROGRESS_NO = VALUES(PROGRESS_NO),
		    MODULE_ID = VALUES(MODULE_ID),
		    PROC_CD = VALUES(PROC_CD),
		    PROC_YEAR = VALUES(PROC_YEAR),
		    PROC_SEQ = VALUES(PROC_SEQ),
		    TRY_SEQ = VALUES(TRY_SEQ),
		    STUDY_LVL = VALUES(STUDY_LVL),
		    USER_ID = VALUES(USER_ID),
		    BAG_SCAN_ID = VALUES(BAG_SCAN_ID),
		    UNIT_ID = VALUES(UNIT_ID),
		    ACTION_DIV = VALUES(ACTION_DIV),
		    USER_ACTION_DIV = VALUES(USER_ACTION_DIV),
		    GAIN_SCORE = VALUES(GAIN_SCORE),
		    END_YN = VALUES(END_YN),
		    INSERT_DATE = VALUES(INSERT_DATE)
	</update>
	
	<update id="updateBaselineEvaluationBackup" parameterType="egovframework.com.adm.system.vo.XbtScore">	
		INSERT INTO XBT_BASELINE_EVALUATION_BACKUP (EVALU_NO, PROC_CD, PROC_YEAR, PROC_SEQ, USER_ID, TEST_DATE, STUDY_LVL, MODULE_ID, GAIN_SCORE, RIGHT_CNT, WRONG_CNT, BAN_CNT, END_YN, PASS_YN, TRY_SEQ, INSERT_DATE)
		SELECT EVALU_NO, PROC_CD, PROC_YEAR, PROC_SEQ, USER_ID, TEST_DATE, STUDY_LVL, MODULE_ID, GAIN_SCORE, RIGHT_CNT, WRONG_CNT, BAN_CNT, END_YN, PASS_YN, TRY_SEQ, INSERT_DATE
		FROM XBT_BASELINE_EVALUATION
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		ON DUPLICATE KEY UPDATE
		   EVALU_NO = VALUES(EVALU_NO),
			PROC_CD = VALUES(PROC_CD),
			PROC_YEAR = VALUES(PROC_YEAR),
			PROC_SEQ = VALUES(PROC_SEQ),
			USER_ID = VALUES(USER_ID),
			TEST_DATE = VALUES(TEST_DATE),
			STUDY_LVL = VALUES(STUDY_LVL),
			MODULE_ID = VALUES(MODULE_ID),
			GAIN_SCORE = VALUES(GAIN_SCORE),
			RIGHT_CNT = VALUES(RIGHT_CNT),
			WRONG_CNT = VALUES(WRONG_CNT),
			BAN_CNT = VALUES(BAN_CNT),
			END_YN = VALUES(END_YN),
			PASS_YN = VALUES(PASS_YN),
			TRY_SEQ = VALUES(TRY_SEQ),
			INSERT_DATE = VALUES(INSERT_DATE)
	</update>	
	   		
	<update id="updateTheoryProgressingBackup" parameterType="egovframework.com.adm.system.vo.XbtScore">			
		INSERT INTO XBT_STU_THEORY_PROGRESSING_BACKUP (PROGRESS_NO, PROC_CD, PROC_YEAR, PROC_SEQ, TRY_SEQ, USER_ID, QUESTION_ID, QUESTION_TYPE, STUDY_LVL, LAGE_GROUP_CD, MIDDLE_GROUP_CD, SMALL_GROUP_CD, QUESTION, MULTI_PLUS_IMG_NAME, CHOICE1, CHOICE2, CHOICE3, CHOICE4, ACTION_DIV, USER_ACTION_DIV, GAIN_SCORE, END_YN, INSERT_DATE)
		SELECT PROGRESS_NO, PROC_CD, PROC_YEAR, PROC_SEQ, TRY_SEQ, USER_ID, QUESTION_ID, QUESTION_TYPE, STUDY_LVL, LAGE_GROUP_CD, MIDDLE_GROUP_CD, SMALL_GROUP_CD, QUESTION, MULTI_PLUS_IMG_NAME, CHOICE1, CHOICE2, CHOICE3, CHOICE4, ACTION_DIV, USER_ACTION_DIV, GAIN_SCORE, END_YN, INSERT_DATE
		FROM XBT_STU_THEORY_PROGRESSING
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		ON DUPLICATE KEY UPDATE
			PROGRESS_NO	=	VALUES(	PROGRESS_NO	),
			PROC_CD	=	VALUES(	PROC_CD	),
			PROC_YEAR	=	VALUES(	PROC_YEAR	),
			PROC_SEQ	=	VALUES(	PROC_SEQ	),
			TRY_SEQ	=	VALUES(	TRY_SEQ	),
			USER_ID	=	VALUES(	USER_ID	),
			QUESTION_ID	=	VALUES(	QUESTION_ID	),
			QUESTION_TYPE	=	VALUES(	QUESTION_TYPE	),
			STUDY_LVL	=	VALUES(	STUDY_LVL	),
			LAGE_GROUP_CD	=	VALUES(	LAGE_GROUP_CD	),
			MIDDLE_GROUP_CD	=	VALUES(	MIDDLE_GROUP_CD	),
			SMALL_GROUP_CD	=	VALUES(	SMALL_GROUP_CD	),
			QUESTION	=	VALUES(	QUESTION	),
			MULTI_PLUS_IMG_NAME	=	VALUES(	MULTI_PLUS_IMG_NAME	),
			CHOICE1	=	VALUES(	CHOICE1	),
			CHOICE2	=	VALUES(	CHOICE2	),
			CHOICE3	=	VALUES(	CHOICE3	),
			CHOICE4	=	VALUES(	CHOICE4	),
			ACTION_DIV	=	VALUES(	ACTION_DIV	),
			USER_ACTION_DIV	=	VALUES(	USER_ACTION_DIV	),
			GAIN_SCORE	=	VALUES(	GAIN_SCORE	),
			END_YN	=	VALUES(	END_YN	),
			INSERT_DATE	=	VALUES(	INSERT_DATE	)   		
	</update>
	
	<update id="updateBaselineTheoryBackup" parameterType="egovframework.com.adm.system.vo.XbtScore">	
		INSERT INTO XBT_BASELINE_THEORY_BACKUP (THEORY_NO, PROC_CD, PROC_YEAR, USER_ID, PROC_SEQ, TEST_DATE, STUDY_LVL, GAIN_SCORE, DANGER_SCORE, RIGHT_CNT, WRONG_CNT, DANGER_RIGHT_CNT, DANGER_WRONG_CNT, END_YN, PASS_YN, TRY_SEQ, INSERT_DATE)
		SELECT THEORY_NO, PROC_CD, PROC_YEAR, USER_ID, PROC_SEQ, TEST_DATE, STUDY_LVL, GAIN_SCORE, DANGER_SCORE, RIGHT_CNT, WRONG_CNT, DANGER_RIGHT_CNT, DANGER_WRONG_CNT, END_YN, PASS_YN, TRY_SEQ, INSERT_DATE
		FROM XBT_BASELINE_THEORY
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		ON DUPLICATE KEY UPDATE
			THEORY_NO	=	VALUES(	THEORY_NO	),
			PROC_CD	=	VALUES(	PROC_CD	),
			PROC_YEAR	=	VALUES(	PROC_YEAR	),
			USER_ID	=	VALUES(	USER_ID	),
			PROC_SEQ	=	VALUES(	PROC_SEQ	),
			TEST_DATE	=	VALUES(	TEST_DATE	),
			STUDY_LVL	=	VALUES(	STUDY_LVL	),
			GAIN_SCORE	=	VALUES(	GAIN_SCORE	),
			DANGER_SCORE	=	VALUES(	DANGER_SCORE	),
			RIGHT_CNT	=	VALUES(	RIGHT_CNT	),
			WRONG_CNT	=	VALUES(	WRONG_CNT	),
			DANGER_RIGHT_CNT	=	VALUES(	DANGER_RIGHT_CNT	),
			DANGER_WRONG_CNT	=	VALUES(	DANGER_WRONG_CNT	),
			END_YN	=	VALUES(	END_YN	),
			PASS_YN	=	VALUES(	PASS_YN	),
			TRY_SEQ	=	VALUES(	TRY_SEQ	),
			INSERT_DATE	=	VALUES(	INSERT_DATE	)
	</update>	
	
	<update id="updateBaselineStudentInfoBackup" parameterType="egovframework.com.adm.system.vo.XbtScore">	
		INSERT INTO XBT_BASELINE_STUDENT_INFO_BACKUP (STUDENT_NO, PROC_CD, PROC_YEAR, PROC_SEQ, EDU_CODE, EDU_NAME, USER_ID, USER_NM, PROC_NM, COMP_NM, DEPT_NM, GAIN_SCORE, PRACTICE_BEFORE_SCORE, PRACTICE_SCORE, PRACTICE_CAR_BEFORE_SCORE, PRACTICE_CAR_SCORE, PRACTICE_HUMAN_BEFORE_SCORE, PRACTICE_HUMAN_SCORE, PRACTICE_YN, THEORY_SCORE, THEORY_YN, DANGER_SCORE, DANGER_YN, EVALUATION_SCORE, EVALUATION_YN, PASS_YN, ENDING_PROCESS_DATE, EDU_START_DATE, EDU_END_DATE, ENDING_YN, INSERT_DATE, INSERT_ID, UPDATE_DATE, UPDATE_ID, THEORY_PASS_YN, PRACTICE_PASS_YN, EVALUATION_PASS_YN, DANGER_PASS_YN)
		SELECT STUDENT_NO, PROC_CD, PROC_YEAR, PROC_SEQ, EDU_CODE, EDU_NAME, USER_ID, USER_NM, PROC_NM, COMP_NM, DEPT_NM, GAIN_SCORE, PRACTICE_BEFORE_SCORE, PRACTICE_SCORE, PRACTICE_CAR_BEFORE_SCORE, PRACTICE_CAR_SCORE, PRACTICE_HUMAN_BEFORE_SCORE, PRACTICE_HUMAN_SCORE, PRACTICE_YN, THEORY_SCORE, THEORY_YN, DANGER_SCORE, DANGER_YN, EVALUATION_SCORE, EVALUATION_YN, PASS_YN, ENDING_PROCESS_DATE, EDU_START_DATE, EDU_END_DATE, ENDING_YN, INSERT_DATE, INSERT_ID, UPDATE_DATE, UPDATE_ID, THEORY_PASS_YN, PRACTICE_PASS_YN, EVALUATION_PASS_YN, DANGER_PASS_YN
		FROM XBT_BASELINE_STUDENT_INFO
		WHERE PROC_CD = #{procCd} AND USER_ID = #{userId}
		ON DUPLICATE KEY UPDATE
			PRACTICE_SCORE              	=	VALUES(	PRACTICE_SCORE              	),
			PRACTICE_CAR_BEFORE_SCORE   	=	VALUES(	PRACTICE_CAR_BEFORE_SCORE   	),
			PRACTICE_CAR_SCORE          	=	VALUES(	PRACTICE_CAR_SCORE          	),
			PRACTICE_HUMAN_BEFORE_SCORE 	=	VALUES(	PRACTICE_HUMAN_BEFORE_SCORE 	),
			PRACTICE_HUMAN_SCORE        	=	VALUES(	PRACTICE_HUMAN_SCORE        	),
			PRACTICE_YN                 	=	VALUES(	PRACTICE_YN                 	),
			THEORY_SCORE                	=	VALUES(	THEORY_SCORE                	),
			THEORY_YN                   	=	VALUES(	THEORY_YN                   	),
			DANGER_SCORE                	=	VALUES(	DANGER_SCORE                	),
			DANGER_YN                   	=	VALUES(	DANGER_YN                   	),
			EVALUATION_SCORE            	=	VALUES(	EVALUATION_SCORE            	),
			EVALUATION_YN               	=	VALUES(	EVALUATION_YN               	),
			PASS_YN                     	=	VALUES(	PASS_YN                     	),
			ENDING_PROCESS_DATE         	=	VALUES(	ENDING_PROCESS_DATE         	),
			EDU_START_DATE              	=	VALUES(	EDU_START_DATE              	),
			EDU_END_DATE                	=	VALUES(	EDU_END_DATE                	),
			ENDING_YN                   	=	VALUES(	ENDING_YN                   	),
			INSERT_DATE                 	=	VALUES(	INSERT_DATE                 	),
			INSERT_ID                   	=	VALUES(	INSERT_ID                   	),
			UPDATE_DATE                 	=	VALUES(	UPDATE_DATE                 	),
			UPDATE_ID                   	=	VALUES(	UPDATE_ID                   	),
			THEORY_PASS_YN              	=	VALUES(	THEORY_PASS_YN              	),
			PRACTICE_PASS_YN            	=	VALUES(	PRACTICE_PASS_YN            	),
			EVALUATION_PASS_YN          	=	VALUES(	EVALUATION_PASS_YN          	),
			DANGER_PASS_YN              	=	VALUES(	DANGER_PASS_YN              	)
	</update>		
</mapper>