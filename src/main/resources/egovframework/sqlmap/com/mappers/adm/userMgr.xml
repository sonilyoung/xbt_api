<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.com.adm.userMgr.dao.UserMgrDAO">
	
	<!-- 교육생관리-->
		
	<!-- 교육생 정보조회-->
	<select id="selectUserList" parameterType="egovframework.com.adm.userMgr.vo.UserInfo" resultType="egovframework.com.adm.userMgr.vo.UserInfo" >
		SELECT 
			TOT.*,
			(select Max(XBSI.PROC_SEQ) from XBT_BASELINE_STUDENT_INFO XBSI where XBSI.PROC_CD = TOT.procCd AND XBSI.USER_ID = TOT.USER_ID)as procSeq,
			(select Max(XBSI.PASS_YN) from XBT_BASELINE_STUDENT_INFO XBSI where XBSI.USER_ID = TOT.USER_ID)as passYn
		FROM (				
			SELECT 
				USER_NO,
				USER_ID,
				USER_NM,
				USER_PW,
				A.AUTH_CD,
				EDU_CODE,
				EDU_NAME,
				USER_NM_CH,
				USER_NM_EN,
				SEX,
				BIRTH_DAY,
				AGE,
				ADDRESS,
				DEPT,
				POSITION,
				WORK,
				CAREER1,
				CAREER2,
				CAREER3,
				CAREER4,
				CAREER5,
				CAREER_START_DATE1,
				CAREER_END_DATE1,
				CAREER_COMPANY1,
				CAREER_POSITION1,
				CAREER_START_DATE2,
				CAREER_END_DATE2,
				CAREER_COMPANY2,
				CAREER_POSITION2,
				CAREER_START_DATE3,
				CAREER_END_DATE3,
				CAREER_COMPANY3,
				CAREER_POSITION3,
				CAREER_START_DATE4,
				CAREER_END_DATE4,
				CAREER_COMPANY4,
				CAREER_POSITION4,
				CAREER_START_DATE5,
				CAREER_END_DATE5,
				CAREER_COMPANY5,
				CAREER_POSITION5,				
				MILITARY_CAREER,
				MILITARY_CLASS,
				MILITARY_END,
				MILITARY_START_DATE,
				MILITARY_END_DATE,				
				REGIST_NUMBER,
				EMPLOY_STATUS_YN,
				LAST_EDU,
				LAST_EDU_NAME,
				LAST_EDU_DEPT,
				LAST_EDU_YEAR,
				LAST_EDU_END,
				WRITE_DATE,
				COMPANY,
				TEL_NO,
				HP_NO,
				EMAIL,
				LOGIN_START,
				LOGIN_LAST,
				PW_PRIOR,
				PW_CHANGE,
				PW_UPDATE,
				PW_PERIOD,
				A.USE_YN,
				A.INSERT_ID,
				A.INSERT_DATE,
				A.UPDATE_ID,
				A.UPDATE_DATE,
				A.CLASS_TYPE,
				(SELECT MAX(PROC_CD) FROM XBT_BASELINE_STUDENT_INFO XBSI WHERE XBSI.USER_ID = USER_ID) AS procCd,
				A.FACE_TYPE,
				A.FACE_YN      
         FROM XBT_STU_USER A INNER JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD
		<choose>
			<when test='searchval != "" and searchval != null'>
				AND (
					USER_ID LIKE CONCAT('%' , #{searchval} , '%')
					OR USER_NM LIKE CONCAT('%' , #{searchval} , '%')
					OR EDU_NAME LIKE  CONCAT('%' , #{searchval} , '%')
					OR DEPT LIKE  CONCAT('%' , #{searchval} , '%')
					OR POSITION LIKE  CONCAT('%' , #{searchval} , '%')
					OR COMPANY LIKE  CONCAT('%' , #{searchval} , '%')
					OR WRITE_DATE LIKE  CONCAT('%' , #{searchval} , '%')
				)
			</when>
		</choose>         
         ORDER BY A.INSERT_DATE DESC
    )TOT			
	</select>	
	
	<!-- 교육생 정보조회팝업-->
	<select id="selectUserListPop" parameterType="egovframework.com.adm.userMgr.vo.UserInfo" resultType="egovframework.com.adm.userMgr.vo.UserInfo" >	

		SELECT * FROM (
		<choose>
			<when test='procCd == "0" or procCd == 0'>
				SELECT 
					USER_NO,
					USER_ID,
					USER_NM,
					USER_PW,
					A.AUTH_CD,
					EDU_NAME,
					USER_NM_CH,
					USER_NM_EN,
					SEX,
					BIRTH_DAY,
					AGE,
					ADDRESS,
					DEPT,
					POSITION,
					WORK,
					CAREER1,
					CAREER2,
					CAREER3,
					CAREER4,
					CAREER5,
					CAREER_START_DATE1,
					CAREER_END_DATE1,
					CAREER_COMPANY1,
					CAREER_POSITION1,
					CAREER_START_DATE2,
					CAREER_END_DATE2,
					CAREER_COMPANY2,
					CAREER_POSITION2,
					CAREER_START_DATE3,
					CAREER_END_DATE3,
					CAREER_COMPANY3,
					CAREER_POSITION3,
					CAREER_START_DATE4,
					CAREER_END_DATE4,
					CAREER_COMPANY4,
					CAREER_POSITION4,
					CAREER_START_DATE5,
					CAREER_END_DATE5,
					CAREER_COMPANY5,
					CAREER_POSITION5,				
					MILITARY_CAREER,
					MILITARY_CLASS,
					MILITARY_END,
					MILITARY_START_DATE,
					MILITARY_END_DATE,				
					REGIST_NUMBER,
					EMPLOY_STATUS_YN,
					LAST_EDU,
					LAST_EDU_NAME,
					LAST_EDU_DEPT,
					LAST_EDU_YEAR,
					LAST_EDU_END,
					WRITE_DATE,
					COMPANY,
					TEL_NO,
					HP_NO,
					EMAIL,
					LOGIN_START,
					LOGIN_LAST,
					PW_PRIOR,
					PW_CHANGE,
					PW_UPDATE,
					PW_PERIOD,
					A.USE_YN,
					A.INSERT_ID,
					A.INSERT_DATE,
					A.UPDATE_ID,
					A.UPDATE_DATE      
	         	 FROM XBT_STU_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD				
		         WHERE USER_ID NOT IN (
			         SELECT USER_ID FROM XBT_BASELINE_STUDENT_INFO WHERE ENDING_YN = 'N' 
		         )			
			</when>
			<otherwise>
				SELECT 
					USER_NO,
					USER_ID,
					USER_NM,
					USER_PW,
					A.AUTH_CD,
					EDU_NAME,
					USER_NM_CH,
					USER_NM_EN,
					SEX,
					BIRTH_DAY,
					AGE,
					ADDRESS,
					DEPT,
					POSITION,
					WORK,
					CAREER1,
					CAREER2,
					CAREER3,
					CAREER4,
					CAREER5,
					CAREER_START_DATE1,
					CAREER_END_DATE1,
					CAREER_COMPANY1,
					CAREER_POSITION1,
					CAREER_START_DATE2,
					CAREER_END_DATE2,
					CAREER_COMPANY2,
					CAREER_POSITION2,
					CAREER_START_DATE3,
					CAREER_END_DATE3,
					CAREER_COMPANY3,
					CAREER_POSITION3,
					CAREER_START_DATE4,
					CAREER_END_DATE4,
					CAREER_COMPANY4,
					CAREER_POSITION4,
					CAREER_START_DATE5,
					CAREER_END_DATE5,
					CAREER_COMPANY5,
					CAREER_POSITION5,				
					MILITARY_CAREER,
					MILITARY_CLASS,
					MILITARY_END,
					MILITARY_START_DATE,
					MILITARY_END_DATE,				
					REGIST_NUMBER,
					EMPLOY_STATUS_YN,
					LAST_EDU,
					LAST_EDU_NAME,
					LAST_EDU_DEPT,
					LAST_EDU_YEAR,
					LAST_EDU_END,
					WRITE_DATE,
					COMPANY,
					TEL_NO,
					HP_NO,
					EMAIL,
					LOGIN_START,
					LOGIN_LAST,
					PW_PRIOR,
					PW_CHANGE,
					PW_UPDATE,
					PW_PERIOD,
					A.USE_YN,
					A.INSERT_ID,
					A.INSERT_DATE,
					A.UPDATE_ID,
					A.UPDATE_DATE      
	         FROM XBT_STU_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	
	         WHERE USER_ID NOT IN (
		         SELECT USER_ID FROM XBT_BASELINE_STUDENT_INFO WHERE ENDING_YN = 'N' 
	         )		     
	         union all
				SELECT 
					USER_NO,
					USER_ID,
					USER_NM,
					USER_PW,
					A.AUTH_CD,
					EDU_NAME,
					USER_NM_CH,
					USER_NM_EN,
					SEX,
					BIRTH_DAY,
					AGE,
					ADDRESS,
					DEPT,
					POSITION,
					WORK,
					CAREER1,
					CAREER2,
					CAREER3,
					CAREER4,
					CAREER5,
					CAREER_START_DATE1,
					CAREER_END_DATE1,
					CAREER_COMPANY1,
					CAREER_POSITION1,
					CAREER_START_DATE2,
					CAREER_END_DATE2,
					CAREER_COMPANY2,
					CAREER_POSITION2,
					CAREER_START_DATE3,
					CAREER_END_DATE3,
					CAREER_COMPANY3,
					CAREER_POSITION3,
					CAREER_START_DATE4,
					CAREER_END_DATE4,
					CAREER_COMPANY4,
					CAREER_POSITION4,
					CAREER_START_DATE5,
					CAREER_END_DATE5,
					CAREER_COMPANY5,
					CAREER_POSITION5,				
					MILITARY_CAREER,
					MILITARY_CLASS,
					MILITARY_END,
					MILITARY_START_DATE,
					MILITARY_END_DATE,				
					REGIST_NUMBER,
					EMPLOY_STATUS_YN,
					LAST_EDU,
					LAST_EDU_NAME,
					LAST_EDU_DEPT,
					LAST_EDU_YEAR,
					LAST_EDU_END,
					WRITE_DATE,
					COMPANY,
					TEL_NO,
					HP_NO,
					EMAIL,
					LOGIN_START,
					LOGIN_LAST,
					PW_PRIOR,
					PW_CHANGE,
					PW_UPDATE,
					PW_PERIOD,
					A.USE_YN,
					A.INSERT_ID,
					A.INSERT_DATE,
					A.UPDATE_ID,
					A.UPDATE_DATE      
	         FROM XBT_STU_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	         
	         WHERE USER_ID IN (
		         SELECT USER_ID FROM XBT_BASELINE_STUDENT_INFO WHERE PROC_CD = #{procCd} 
	         ) 
			</otherwise>
		</choose>         
        )TOT 
        <if test='searchval != "" and searchval != null'>
        	WHERE USER_ID = #{searchval}
				  OR USER_NM = #{searchval}
				  OR WRITE_DATE = #{searchval}
				  OR INSERT_DATE = #{searchval}
				  OR EDU_NAME LIKE CONCAT('%' , #{searchval} , '%')
        </if>
        ORDER BY INSERT_DATE DESC
	</select>		

	<!-- 차수 교육생 정보조회-->
	<select id="selectBaselineUserList" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >	
		SELECT
			PROC_CD,
			PROC_YEAR,
			PROC_SEQ,
			USER_ID,
			USER_NM,
			EDU_CODE,
			EDU_NAME, 			
			PROC_NM,
			COMP_NM,
			GAIN_SCORE,
			PRACTICE_SCORE,
			THEORY_SCORE,
			EVALUATION_SCORE,
			PASS_YN,
			ENDING_PROCESS_DATE,
			EDU_START_DATE,
			EDU_END_DATE,
			ENDING_YN,
			EVALUATION_YN,
			THEORY_YN,
			DANGER_YN,
			THEORY_PASS_YN,
			PRACTICE_PASS_YN,
			EVALUATION_PASS_YN,
			DANGER_PASS_YN
		FROM
			XBT_BASELINE_STUDENT_INFO
		WHERE 1=1
		<choose>
			<when test='searchval != "" and searchval != null'>
				AND PROC_NM LIKE CONCAT('%' , #{searchval} , '%')
				OR USER_ID LIKE  CONCAT('%' , #{searchval} , '%')
				OR USER_NM LIKE  CONCAT('%' , #{searchval} , '%')
				OR EDU_NAME LIKE  CONCAT('%' , #{searchval} , '%')
				OR COMP_NM LIKE  CONCAT('%' , #{searchval} , '%')
				OR #{searchval} BETWEEN EDU_START_DATE AND EDU_END_DATE 			
			</when>
		</choose>
		<if test='procSeq != "" and procSeq != null'>
			AND PROC_SEQ = #{procSeq}
		</if>
		<if test='procYear != "" and procYear != null'>
			AND PROC_YEAR = #{procYear}
		</if>		
		<if test='eduCode != "" and eduCode != null'>
			AND EDU_CODE = #{eduCode}
		</if>				
		ORDER BY INSERT_DATE DESC		
	</select>	
	
	
	<!-- 차수 교육생 비중기본정보  -->
	<select id="selectBaselineBasicTotalScore" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >	
		SELECT
			PROC_CD,
			PRACTICE_TOTAL_SCORE, 
			THEORY_TOTAL_SCORE ,
			EVALUATION_TOTAL_SCORE ,
			PRACTICE_CAR_TOTAL_SCORE,
			PRACTICE_HUMAN_TOTAL_SCORE
		FROM
			XBT_BASELINE
		WHERE
			PROC_CD = #{procCd} 
	</select>	
	
	<!-- 차수 교육생 비중평가조호  -->
	<select id="selectBaselineEvaluation" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >
		SELECT * FROM (	
			SELECT
				T1.PROC_CD,
				T1.PROC_NM,
				T2.RIGHT_CNT + T2.WRONG_CNT AS questionCnt,
				T2.RIGHT_CNT,
				T2.WRONG_CNT,
				T2.GAIN_SCORE AS evaluationScore,
				(SELECT EVALUATION_TOTAL_SCORE FROM XBT_BASELINE XB WHERE XB.PROC_CD = T1.PROC_CD)AS EVALUATION_TOTAL_SCORE,
				T1.EVALUATION_SCORE AS gainScore
			FROM
				XBT_BASELINE_STUDENT_INFO T1 INNER JOIN XBT_BASELINE_EVALUATION T2
				ON T1.USER_ID = #{userId} 
				AND T1.PROC_CD = #{procCd} 
				AND T1.USER_ID = T2.USER_ID 
				AND T1.PROC_CD = T2.PROC_CD
				ORDER BY TRY_SEQ DESC
		) TOT LIMIT 1 			 
	</select>	

	<!-- 차수 교육생 비중이론평가조회 -->
	<select id="selectBaselineTherory" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >
		SELECT * FROM (
			SELECT
				T1.PROC_CD,
				T1.PROC_NM,
				T2.RIGHT_CNT + T2.WRONG_CNT AS questionCnt,
				T2.RIGHT_CNT,
				T2.WRONG_CNT,
				T2.RIGHT_CNT + T2.WRONG_CNT AS dangerQuestionCnt,
				T2.DANGER_RIGHT_CNT,
				T2.DANGER_WRONG_CNT,				
				T2.GAIN_SCORE AS theoryScore,
				T2.DANGER_SCORE AS dangerScore,
				(SELECT THEORY_TOTAL_SCORE FROM XBT_BASELINE XB WHERE XB.PROC_CD = T1.PROC_CD)AS THEORY_TOTAL_SCORE,
				T1.THEORY_SCORE AS gainScore
			FROM
				XBT_BASELINE_STUDENT_INFO T1 INNER JOIN XBT_BASELINE_THEORY T2
				ON T1.USER_ID = #{userId} 
				AND T1.PROC_CD = #{procCd} 
				AND T1.USER_ID = T2.USER_ID 
				AND T1.PROC_CD = T2.PROC_CD
			ORDER BY TRY_SEQ DESC
		) TOT LIMIT 1 				
	</select>
	
	<!-- 차수 교육생 비중실기평가조회 -->
	<select id="selectBaselinePractice" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >
		SELECT
			T1.PROC_CD,
			T1.EDU_CODE,
			T1.PROC_NM,
			(SELECT PRACTICE_TOTAL_SCORE FROM XBT_BASELINE XB WHERE XB.PROC_CD = T1.PROC_CD)AS PRACTICE_TOTAL_SCORE,
			IFNULL(T1.PRACTICE_BEFORE_SCORE, 0) AS practiceScore,
			IFNULL(T1.PRACTICE_SCORE, 0) AS gainScore,
			(SELECT PRACTICE_CAR_TOTAL_SCORE FROM XBT_BASELINE XB WHERE XB.PROC_CD = T1.PROC_CD)AS PRACTICE_CAR_TOTAL_SCORE,
			(SELECT PRACTICE_HUMAN_TOTAL_SCORE FROM XBT_BASELINE XB WHERE XB.PROC_CD = T1.PROC_CD)AS PRACTICE_HUMAN_TOTAL_SCORE,
			IFNULL(T1.PRACTICE_CAR_BEFORE_SCORE, 0) AS practiceCarScore, 
			IFNULL(T1.PRACTICE_HUMAN_BEFORE_SCORE, 0) AS practiceHumanScore,
			IFNULL(T1.PRACTICE_CAR_SCORE, 0) AS carGainScore,
			IFNULL(T1.PRACTICE_HUMAN_SCORE, 0) AS humanGainScore,
			IFNULL(T1.THEORY_SCORE, 0) AS theoryScore,
			IFNULL(T1.EVALUATION_SCORE, 0) AS evaluationScore
		FROM
			XBT_BASELINE_STUDENT_INFO T1 
		WHERE 			
			T1.USER_ID = #{userId} 
			AND T1.PROC_CD = #{procCd} 
	</select>
		
	
	<!-- 차수 교육생 수정 -->
	<update id="updateBaselineUser" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline">
		UPDATE XBT_BASELINE_STUDENT_INFO
		SET
		GAIN_SCORE = #{gainScore},
		PRACTICE_BEFORE_SCORE = #{practiceBeforeScore}, 
		PRACTICE_SCORE = #{practiceScore},
		PRACTICE_CAR_BEFORE_SCORE = #{practiceCarBeforeScore},
		PRACTICE_CAR_SCORE = #{practiceCarScore},
		PRACTICE_HUMAN_BEFORE_SCORE = #{practiceHumanBeforeScore},
		PRACTICE_HUMAN_SCORE = #{practiceHumanScore},
		PRACTICE_YN = 'Y'
		WHERE USER_ID = #{userId}
		AND PROC_CD = #{procCd}			
	</update>	
	
	<!-- 교육생 상세조회-->
	<select id="selectUserCheck" parameterType="egovframework.com.adm.userMgr.vo.UserInfo" resultType="egovframework.com.adm.userMgr.vo.UserInfo" >	
		 SELECT 
			USER_ID
         FROM XBT_STU_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	
         WHERE A.USER_ID = #{userId}	
	</select>			
	
	<!-- 교육생 상세조회-->
	<select id="selectUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo" resultType="egovframework.com.adm.userMgr.vo.UserInfo" >	
			SELECT 
				USER_NO,
				USER_ID,
				USER_NM,
				USER_PW,
				A.AUTH_CD,
				EDU_CODE,
				EDU_NAME,
				USER_NM_CH,
				USER_NM_EN,
				SEX,
				BIRTH_DAY,
				AGE,
				ADDRESS,
				ADDRESS_EN,
				DEPT,
				POSITION,
				WORK,
				CAREER1,
				CAREER2,
				CAREER3,
				CAREER4,
				CAREER5,
				CAREER_START_DATE1,
				CAREER_END_DATE1,
				CAREER_COMPANY1,
				CAREER_POSITION1,
				CAREER_START_DATE2,
				CAREER_END_DATE2,
				CAREER_COMPANY2,
				CAREER_POSITION2,
				CAREER_START_DATE3,
				CAREER_END_DATE3,
				CAREER_COMPANY3,
				CAREER_POSITION3,
				CAREER_START_DATE4,
				CAREER_END_DATE4,
				CAREER_COMPANY4,
				CAREER_POSITION4,
				CAREER_START_DATE5,
				CAREER_END_DATE5,
				CAREER_COMPANY5,
				CAREER_POSITION5,				
				MILITARY_CAREER,
				MILITARY_CLASS,
				MILITARY_END,
				MILITARY_START_DATE,
				MILITARY_END_DATE,				
				REGIST_NUMBER,
				EMPLOY_STATUS_YN,
				LAST_EDU,
				LAST_EDU_NAME,
				LAST_EDU_DEPT,
				LAST_EDU_YEAR,
				LAST_EDU_END,
				WRITE_DATE,
				COMPANY,
				TEL_NO,
				HP_NO,
				EMAIL,
				LOGIN_START,
				LOGIN_LAST,
				PW_PRIOR,
				PW_CHANGE,
				PW_UPDATE,
				PW_PERIOD,
				A.USE_YN,
				A.INSERT_ID,
				A.INSERT_DATE,
				A.UPDATE_ID,
				A.UPDATE_DATE, 
				A.CAREER_YN,
				A.CLASS_TYPE
         FROM XBT_STU_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	
         WHERE A.USER_ID = #{userId}		
	</select>		
	
		<!-- 교육생 등록 -->
	<insert id="insertUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">
		INSERT INTO XBT_STU_USER(
			USER_ID,
			USER_NM,
			USER_PW,
			AUTH_CD,
			EDU_CODE,
			EDU_NAME,
			USER_NM_CH,
			USER_NM_EN,
			SEX,
			BIRTH_DAY,
			AGE,
			ADDRESS,
			ADDRESS_EN,
			DEPT,
			POSITION,
			WORK,
			CAREER1,
			CAREER2,
			CAREER3,
			CAREER4,
			CAREER5,
			MILITARY_CAREER,
			REGIST_NUMBER,
			EMPLOY_STATUS_YN,
			LAST_EDU,
			WRITE_DATE,
			COMPANY,
			TEL_NO,
			HP_NO,
			EMAIL,
			LOGIN_START,
			LOGIN_LAST,
			PW_PRIOR,
			PW_CHANGE,
			PW_UPDATE,
			PW_PERIOD,
			USE_YN,
			INSERT_ID,
			INSERT_DATE,
			CAREER_YN,
			CAREER_START_DATE1,
			CAREER_END_DATE1,
			CAREER_COMPANY1,
			CAREER_POSITION1,
			CAREER_START_DATE2,
			CAREER_END_DATE2,
			CAREER_COMPANY2,
			CAREER_POSITION2,
			CAREER_START_DATE3,
			CAREER_END_DATE3,
			CAREER_COMPANY3,
			CAREER_POSITION3,
			CAREER_START_DATE4,
			CAREER_END_DATE4,
			CAREER_COMPANY4,
			CAREER_POSITION4,
			CAREER_START_DATE5,
			CAREER_END_DATE5,
			CAREER_COMPANY5,
			CAREER_POSITION5,
			MILITARY_CLASS,
			MILITARY_END,
			MILITARY_START_DATE,
			MILITARY_END_DATE,			
			LAST_EDU_NAME,
			LAST_EDU_DEPT,
			LAST_EDU_YEAR,
			LAST_EDU_END,
			EDU_DAY,
			EDU_TIME,
			CLASS_TYPE,
			FACE_TYPE
		)VALUES(
			#{userId}
			,#{userNm}
			,#{userPw}
			,'0002'
			,#{eduCode}
			,#{eduName}
			,#{userNmCh}
			,#{userNmEn}
			,#{sex}
			,#{birthDay}
			,#{age}
			,#{address}
			,#{addressEn}
			,#{dept}
			,#{position}
			,#{work}
			,#{career1}
			,#{career2}
			,#{career3}
			,#{career4}
			,#{career5}
			,#{militaryCareer}
			,#{registNumber}
			,#{employStatusYn}
			,#{lastEdu}
			,#{writeDate}
			,#{company}
			,#{telNo}
			,#{hpNo}
			,#{email}
			,#{loginStart}
			,#{loginLast}
			,#{pwPrior}
			,#{pwChange}
			,#{pwUpdate}
			,#{pwPeriod}
			,'Y'
			,#{insertId}
			,now()
			,#{careerYn}
			,#{careerStartDate1}
			,#{careerEndDate1}
			,#{careerCompany1}
			,#{careerPosition1}
			,#{careerStartDate2}
			,#{careerEndDate2}
			,#{careerCompany2}
			,#{careerPosition2}
			,#{careerStartDate3}
			,#{careerEndDate3}
			,#{careerCompany3}
			,#{careerPosition3}
			,#{careerStartDate4}
			,#{careerEndDate4}
			,#{careerCompany4}
			,#{careerPosition4}
			,#{careerStartDate5}
			,#{careerEndDate5}
			,#{careerCompany5}
			,#{careerPosition5}
			,#{militaryClass}
			,#{militaryEnd}
			,#{militaryStartDate}
			,#{militaryEndDate}			
			,#{lastEduName}
			,#{lastEduDept}
			,#{lastEduYear}
			,#{lastEduEnd}
			,#{eduDay}
			,#{eduTime}			
			,#{classType}			
			,#{faceType}			
		)
	
	</insert>	
	
		<!-- 중복 교육생 등록 -->
	<insert id="insertDuplicationUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">
		INSERT INTO XBT_STU_DUPLICATION_USER(
			USER_ID,
			USER_NM,
			INSERT_ID,
			INSERT_DATE
		)VALUES(
			#{userId}
			,#{userNm}
			,#{insertId}
			,now()
		)
	
	</insert>	
	
			
	<!-- 중복 교육생 삭제-->
	<delete id="deleteDuplicationUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">
		DELETE FROM XBT_STU_DUPLICATION_USER  
	</delete>	
	
	<!-- 중복 교육생 상세조회-->
	<select id="selectDuplicationUserList" parameterType="egovframework.com.adm.userMgr.vo.UserInfo" resultType="egovframework.com.adm.userMgr.vo.UserInfo" >	
			SELECT 
				USER_NO,
				USER_ID,
				USER_NM
         FROM XBT_STU_DUPLICATION_USER 	
	</select>			
	
	
	<!-- 교육생 수정 -->
	<update id="updateUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_STU_USER SET				
			USER_NM = 		#{userNm},
			USER_PW = 		#{userPw},
			EDU_CODE = 		#{eduCode},
			EDU_NAME = 		#{eduName},
			USER_NM_CH = 		#{userNmCh},
			USER_NM_EN = 		#{userNmEn},
			SEX = 		#{sex},
			BIRTH_DAY = 		#{birthDay},
			AGE = 		#{age},
			ADDRESS = 		#{address},
			ADDRESS_EN = 		#{addressEn},
			DEPT = 		#{dept},
			POSITION = 		#{position},
			WORK = 		#{work},
			CAREER1 = 		#{career1},
			CAREER2 = 		#{career2},
			CAREER3 = 		#{career3},
			CAREER4 = 		#{career4},
			CAREER5 = 		#{career5},
			MILITARY_CAREER = 		#{militaryCareer},
			REGIST_NUMBER = 		#{registNumber},
			EMPLOY_STATUS_YN = 		#{employStatusYn},
			LAST_EDU = 		#{lastEdu},
			WRITE_DATE = 		#{writeDate},
			COMPANY = 		#{company},
			TEL_NO = 		#{telNo},
			HP_NO = 		#{hpNo},
			EMAIL = 		#{email},
			LOGIN_START = 		#{loginStart},
			LOGIN_LAST = 		#{loginLast},
			PW_PRIOR = 		#{pwPrior},
			PW_CHANGE = 		#{pwChange},
			PW_UPDATE = 		#{pwUpdate},
			PW_PERIOD = 		#{pwPeriod},
			USE_YN = 		#{useYn},
			update_id = 		#{updateId},
			update_date = 		now(),
			CAREER_YN = #{careerYn},
			CAREER_START_DATE1 = 	#{careerStartDate1}  ,
			CAREER_END_DATE1 = 	#{careerEndDate1}        ,
			CAREER_COMPANY1 = 	#{careerCompany1}        ,
			CAREER_POSITION1 = 	#{careerPosition1}       ,
			CAREER_START_DATE2 = 	#{careerStartDate2}  ,
			CAREER_END_DATE2 = 	#{careerEndDate2}        ,
			CAREER_COMPANY2 = 	#{careerCompany2}        ,
			CAREER_POSITION2 = 	#{careerPosition2}       ,
			CAREER_START_DATE3 = 	#{careerStartDate3}  ,
			CAREER_END_DATE3 = 	#{careerEndDate3}        ,
			CAREER_COMPANY3 = 	#{careerCompany3}        ,
			CAREER_POSITION3 = 	#{careerPosition3}       ,
			CAREER_START_DATE4 = 	#{careerStartDate4}  ,
			CAREER_END_DATE4 = 	#{careerEndDate4}        ,
			CAREER_COMPANY4 = 	#{careerCompany4}        ,
			CAREER_POSITION4 = 	#{careerPosition4}       ,
			CAREER_START_DATE5 = 	#{careerStartDate5}  ,
			CAREER_END_DATE5 = 	#{careerEndDate5}        ,
			CAREER_COMPANY5 = 	#{careerCompany5}        ,
			CAREER_POSITION5 = 	#{careerPosition5}       ,
			MILITARY_CLASS = 	#{militaryClass}         ,
			MILITARY_END = 	#{militaryEnd}               ,
			MILITARY_START_DATE = 	#{militaryStartDate} ,
			MILITARY_END_DATE = 	#{militaryEndDate}   ,
			LAST_EDU_NAME = 	#{lastEduName}           ,
			LAST_EDU_DEPT = 	#{lastEduDept}           ,
			LAST_EDU_YEAR = 	#{lastEduYear}           ,
			LAST_EDU_END = 	#{lastEduEnd}                ,
			EDU_DAY = 		#{eduDay}					 ,
			EDU_TIME = 	#{eduTime}						 ,
			CLASS_TYPE = 	#{classType}				 ,
			FACE_TYPE = 	#{faceType}										 
		WHERE USER_ID = 		#{userId}	

	</update>	
	
	<!-- 교육생 삭제-->
	<delete id="deleteUser" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">
		DELETE FROM XBT_STU_USER WHERE USER_ID = #{userId}  
	</delete>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 교육생 차수관리 상단목록-->
	<select id="getUserBaselineList" parameterType="egovframework.com.adm.userMgr.vo.UserBaseline" resultType="egovframework.com.adm.userMgr.vo.UserBaseline" >	
          SELECT 
               TA1.PROC_YEAR/* 과정년도 */
              ,TA1.PROC_CD  /* 과정코드 */
              ,TA1.PROC_SEQ /* 과정차수 */
              , CONCAT('[', TA1.PROC_CD, ']' , TA3.PROC_NM, ' - ', TA1.PROC_SEQ, '차') AS PROC_NM /* 과정명 */
              ,CONCAT(TO_CHAR(TA2.EDU_START_DATE, 'YYYY-MM-DD') , '~' , TO_CHAR(TA2.EDU_END_DATE, 'YYYY-MM-DD')) AS EDU_DATE /* 교육기간 */
              ,CONCAT(COUNT(*) , '/' ,TA2.LIMIT_PERSON_CNT) AS TRAINEES       /* 교육인원 */
              ,TA2.PROC_GAIN_GRADE                                                                                     /* 과정취득학점 */
              ,case when TA2.ENDING_PROCESS_END_YN = '0' then '미완료' else '완료' end AS ENDING_PROCESS_END_YN     /* 수료처리완료여부 */
          FROM XBT_STUDENT_INFO  TA1                                                                                   /* XBT교육생정보 Table */
              ,XBT_PROC_BASELINE_INFO TA2                                                                              /* XBT과정차수정보 Table */
              ,XBT_PROC_INFO     TA3                                                                                   /* XBT과정정보 Table */
         WHERE TA1.PROC_CD   = TA2.PROC_CD                                                                             /* 과정코드 */
           AND TA1.PROC_YEAR = TA2.PROC_YEAR                                                                           /* 과정년도 */
           AND TA1.PROC_SEQ  = TA2.PROC_SEQ                                                                            /* 과정차수 */
           AND TA2.PROC_CD   = TA3.PROC_CD                                                                             /* 과정코드 */
         GROUP BY TA1.PROC_YEAR                               /* 과정년도 */
                 ,TA1.PROC_CD                                                                                         /* 과정코드 */
                 ,TA1.PROC_SEQ                                                                                        /* 과정차수 */
                 ,TA3.PROC_NM                                                                                         /* 과정명 */
                 ,TA2.EDU_START_DATE                                                                                  /* 교육시작일자 */
                 ,TA2.EDU_END_DATE                                                                                    /* 교육종료일자 */
                 ,TA2.LIMIT_PERSON_CNT                                                                                /* 한계인원수 */
                 ,TA2.PROC_GAIN_GRADE                                                                                 /* 과정취득학점 */
                 ,TA2.ENDING_PROCESS_END_YN                                                                           /* 수료처리완료여부 */
         ORDER BY TA1.PROC_YEAR DESC                                                                                  /* 과정년도 */
                 ,TA1.PROC_CD                                                                                         /* 과정코드 */
                 ,TA1.PROC_SEQ                                                                                        /* 과정차수 */
	</select>		
	
	<!-- 교육생 차수관리 교육생정보-->
	<select id="getUserBaselineSubList" parameterType="egovframework.com.adm.userMgr.vo.UserBaselineSub" resultType="egovframework.com.adm.userMgr.vo.UserBaselineSub" >
        SELECT 
			   TA1.PROC_CD                           /* 과정코드 */
			  ,TA1.USER_ID                           /* 사용자ID */
			  ,TA2.USER_NM                           /* 사용자명 */
			  ,TA1.GOIN_STATUS_CD                    /* 입교상태코드 */
			  ,TA1.GOIN_STATUS                       /* 입교상태 */
          FROM XBT_STUDENT_INFO TA1                  /* XBT교육생정보 Table */
              ,XBT_STU_USER     TA2                  /* XBT교육생 Table */
         WHERE TA1.USER_ID   = TA2.USER_ID        /* 사용자ID */
           AND TA1.PROC_YEAR = #{procYear}            /* 과정년도 */
           AND TA1.PROC_CD   = #{procCd}              /* 과정코드 */
           AND TA1.PROC_SEQ  = #{procSeq}               /* 과정차수 */     		
	</select>		
	
	<!-- 교육생 차수관리 교육생 상세정보-->
	<select id="getUserBaselineSubDetail" parameterType="egovframework.com.adm.userMgr.vo.UserBaselineDetail" resultType="egovframework.com.adm.userMgr.vo.UserBaselineDetail" >
        SELECT 
			  TA1.PROC_YEAR                         /* 교육년도 */
			  ,TA1.PROC_GAIN_GRADE                   /* 이수학점 */
			  ,TA1.PROC_NM                           /* 과정명 */
			  ,TA1.PROC_CD                           /* 과정코드 */
			  ,TA1.PROC_SEQ                          /* 과정차수 */
			  ,TA1.START_DATE                          /* 학습시작일자 */
			  ,TA1.END_DATE                          /* 학습종료일자 */
			  ,TA2.COMPANY                           /* 회사명 */
			  ,TA2.DEPT                           /* 부서명 */
			  ,TA1.GOIN_STATUS                       /* 입교상태 */
			  ,TA1.ATTEND_PERCENT                    /* 출석율 */
			  ,TA1.UN_GOIN_REASON_CD                 /* 미입교사유코드 */
			  ,TA1.UN_GOIN_REASON                    /* 미입교사유 */			  
			  ,TA1.GAIN_SCORE                        /* 취득점수 */
			  ,TA1.xbt_RANK                              /* 석차 */
			  ,TA1.ENDING_YN                         /* 수료여부 */
			  ,TA1.PASS_YN                           /* 합격여부 */
			  ,TA1.UN_ENDING_REASON_CD               /* 미수료사유코드 */
			  ,TA1.UN_ENDING_REASON_NM               /* 미수료사유명 */			  
          FROM XBT_STUDENT_INFO TA1                  /* XBT교육생정보 Table */
              ,XBT_STU_USER     TA2                  /* XBT교육생 Table */
         WHERE TA1.USER_ID   = TA2.USER_ID        /* 사용자ID */
           AND TA1.PROC_YEAR = #{procYear}             /* 과정년도 */
           AND TA1.PROC_CD   = #{procCd}              /* 과정코드 */
           AND TA1.PROC_SEQ  = #{procSeq}               /* 과정차수 */ 
           AND TA2.USER_ID = #{userId}				/* 사용자ID */
           		
	</select>	
	
	<!-- 교육생 차수관리 교육생 상세 하위정보목록-->
	<select id="getUserBaselineSubDetailList" parameterType="egovframework.com.adm.userMgr.vo.UserBaselineSubInfo" resultType="egovframework.com.adm.userMgr.vo.UserBaselineSubInfo" >
	<![CDATA[
       SELECT
       		EVALUATION_SUBJECT_CD
       		,FN_GET_COMCODE_NAME('0004', EVALUATION_SUBJECT_CD,'KOR') AS EVALUATION_SUBJECT_NAME
            ,T1.TOT_SCORE
			,T1.REAL_SCORE
			,CASE WHEN CAST(T1.TOT_SCORE AS INTEGER) < CAST(T1.PATTERN_FALL_SCORE AS INTEGER) THEN 0
			      ELSE 1
			 END AS PATTERN_PASS_YN
			,CASE WHEN B.END_TEST = 'END' THEN '완료'
			WHEN B.END_TEST = 'ING' THEN '진행중'
			ELSE ''
			END AS END_TEST
		FROM(
			SELECT 
				 A.PROC_CD
				,A.PROC_YEAR
				,A.PROC_SEQ
				,A.USER_ID
				,A.PROC_NO
				,A.PATTERN
				,B.REAL_TEST_USE_YN
				,NVL(A.PATTERN_SCORE,0) AS PATTERN_SCORE
				,NVL(A.REAL_SCORE,0) AS REAL_SCORE
				,B.REAL_PRESCO AS REAL_PRESCO 
				,NVL(B.PATTERN_PLUS_SCORE,0) AS PATTERN_PLUS_SCORE 
				,NVL(B.PATTERN_FALL_SCORE,0) AS PATTERN_FALL_SCORE
				,FLOOR(CASE WHEN B.REAL_TEST_USE_YN='0' THEN NVL(A.PATTERN_SCORE,0)
				      WHEN B.REAL_TEST_USE_YN='1' THEN NVL(A.PATTERN_SCORE,0)*(100-NVL(B.PATTERN_PLUS_SCORE,0))/100 + NVL(A.REAL_SCORE,0)/B.REAL_PRESCO*100*NVL(B.PATTERN_PLUS_SCORE,0)/100
				 END) AS TOT_SCORE 
				,EVALUATION_SUBJECT_CD
			FROM XBT_STUDENT_PATTERN_SCORE A
			    ,XBT_PROC_BASELINE_PATTERN B
			WHERE 1=1
			AND A.PROC_CD = B.PROC_CD
			AND A.PROC_YEAR = B.PROC_YEAR
			AND A.PROC_SEQ = B.PROC_SEQ
			AND A.PROC_NO = B.PROC_NO
			AND A.PROC_CD = #{procCd}
			AND A.PROC_YEAR = #{procYear}
			AND A.PROC_SEQ = #{procSeq}
		)T1,
		(
			SELECT
				 T.*
				 ,A.END_TEST
			FROM(
				SELECT 
					 PROC_CD
					,PROC_YEAR
					,PROC_SEQ
					,USER_ID
					,TEST_SEQ
					,PATTERN
					,PASS_YN
				FROM XBT_XRAY_STAGE_TYPE
				WHERE 1=1
				AND PROC_CD = #{procCd}
				AND PROC_YEAR = #{procYear}
				AND PROC_SEQ = #{procSeq}
				AND USER_ID = #{userId}
			)T
			,XBT_PROC_BASELINE_CONF A
			WHERE 1=1
			AND T.PROC_CD=A.PROC_CD
			AND T.PROC_YEAR=A.PROC_YEAR
			AND T.PROC_SEQ=A.PROC_SEQ
		) B
		WHERE 1=1
		AND T1.USER_ID = #{userId}
		AND T1.PROC_CD = B.PROC_CD
		AND T1.PROC_YEAR = B.PROC_YEAR
		AND T1.PROC_SEQ = B.PROC_SEQ
		AND T1.PATTERN = B.PATTERN
		]]>
	</select>				
			
			
	<!-- 교육생 정보조회-->
	<select id="selectTeacherList" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo" resultType="egovframework.com.adm.userMgr.vo.TeacherInfo" >	
			SELECT 
				USER_NO,
				USER_ID,
				USER_NM,
				USER_PW,
				A.AUTH_CD,
				EDU_NAME,
				USER_NM_CH,
				USER_NM_EN,
				SEX,
				BIRTH_DAY,
				AGE,
				ADDRESS,
				DEPT,
				POSITION,
				WORK,
				CAREER1,
				CAREER2,
				CAREER3,
				CAREER4,
				CAREER5,
				CAREER_START_DATE1,
				CAREER_END_DATE1,
				CAREER_COMPANY1,
				CAREER_POSITION1,
				CAREER_START_DATE2,
				CAREER_END_DATE2,
				CAREER_COMPANY2,
				CAREER_POSITION2,
				CAREER_START_DATE3,
				CAREER_END_DATE3,
				CAREER_COMPANY3,
				CAREER_POSITION3,
				CAREER_START_DATE4,
				CAREER_END_DATE4,
				CAREER_COMPANY4,
				CAREER_POSITION4,
				CAREER_START_DATE5,
				CAREER_END_DATE5,
				CAREER_COMPANY5,
				CAREER_POSITION5,				
				MILITARY_CAREER,
				MILITARY_CLASS,
				MILITARY_END,
				MILITARY_START_DATE,
				MILITARY_END_DATE,				
				REGIST_NUMBER,
				EMPLOY_STATUS_YN,
				LAST_EDU,
				LAST_EDU_NAME,
				LAST_EDU_DEPT,
				LAST_EDU_YEAR,
				LAST_EDU_END,
				WRITE_DATE,
				COMPANY,
				TEL_NO,
				HP_NO,
				EMAIL,
				LOGIN_START,
				LOGIN_LAST,
				PW_PRIOR,
				PW_CHANGE,
				PW_UPDATE,
				PW_PERIOD,
				A.USE_YN,
				A.INSERT_ID,
				A.INSERT_DATE,
				A.UPDATE_ID,
				A.UPDATE_DATE      
         FROM XBT_TEACHER_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD
         WHERE 1=1
			<choose>
				<when test='searchval != "" and searchval != null'>
					AND (
						USER_ID LIKE CONCAT('%' , #{searchval} , '%')
						OR USER_NM LIKE  CONCAT('%' , #{searchval} , '%')
						OR EDU_NAME LIKE  CONCAT('%' , #{searchval} , '%')
					)
				</when>
			</choose>         
         ORDER BY A.INSERT_DATE DESC			
	</select>	
	
	<!-- 교육생 상세조회-->
	<select id="selectTeacherCheck" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo" resultType="egovframework.com.adm.userMgr.vo.TeacherInfo" >	
		 SELECT 
			USER_ID
         FROM XBT_TEACHER_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	
         WHERE A.USER_ID = #{userId}	
	</select>			
	
	<!-- 교육생 상세조회-->
	<select id="selectTeacher" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo" resultType="egovframework.com.adm.userMgr.vo.TeacherInfo" >	
			SELECT 
				USER_NO,
				USER_ID,
				USER_NM,
				USER_PW,
				A.AUTH_CD,
				EDU_NAME,
				EDU_CODE,
				USER_NM_CH,
				USER_NM_EN,
				SEX,
				BIRTH_DAY,
				AGE,
				ADDRESS,
				DEPT,
				POSITION,
				WORK,
				CAREER1,
				CAREER2,
				CAREER3,
				CAREER4,
				CAREER5,
				CAREER_START_DATE1,
				CAREER_END_DATE1,
				CAREER_COMPANY1,
				CAREER_POSITION1,
				CAREER_START_DATE2,
				CAREER_END_DATE2,
				CAREER_COMPANY2,
				CAREER_POSITION2,
				CAREER_START_DATE3,
				CAREER_END_DATE3,
				CAREER_COMPANY3,
				CAREER_POSITION3,
				CAREER_START_DATE4,
				CAREER_END_DATE4,
				CAREER_COMPANY4,
				CAREER_POSITION4,
				CAREER_START_DATE5,
				CAREER_END_DATE5,
				CAREER_COMPANY5,
				CAREER_POSITION5,				
				MILITARY_CAREER,
				MILITARY_CLASS,
				MILITARY_END,
				MILITARY_START_DATE,
				MILITARY_END_DATE,				
				REGIST_NUMBER,
				EMPLOY_STATUS_YN,
				LAST_EDU,
				LAST_EDU_NAME,
				LAST_EDU_DEPT,
				LAST_EDU_YEAR,
				LAST_EDU_END,
				WRITE_DATE,
				COMPANY,
				TEL_NO,
				HP_NO,
				EMAIL,
				LOGIN_START,
				LOGIN_LAST,
				PW_PRIOR,
				PW_CHANGE,
				PW_UPDATE,
				PW_PERIOD,
				A.USE_YN,
				A.INSERT_ID,
				A.INSERT_DATE,
				A.UPDATE_ID,
				A.UPDATE_DATE, 
				A.CAREER_YN
         FROM XBT_TEACHER_USER A LEFT JOIN XBT_STU_AUTH K ON A.AUTH_CD = K.AUTH_CD	
         WHERE A.USER_ID = #{userId}		
	</select>		
	
		<!-- 교육생 등록 -->
	<insert id="insertTeacher" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">
		INSERT INTO XBT_TEACHER_USER(
			USER_ID,
			USER_NM,
			USER_PW,
			AUTH_CD,
			EDU_NAME,
			EDU_CODE,
			USER_NM_CH,
			USER_NM_EN,
			SEX,
			BIRTH_DAY,
			AGE,
			ADDRESS,
			DEPT,
			POSITION,
			WORK,
			CAREER1,
			CAREER2,
			CAREER3,
			CAREER4,
			CAREER5,
			MILITARY_CAREER,
			REGIST_NUMBER,
			EMPLOY_STATUS_YN,
			LAST_EDU,
			WRITE_DATE,
			COMPANY,
			TEL_NO,
			HP_NO,
			EMAIL,
			LOGIN_START,
			LOGIN_LAST,
			PW_PRIOR,
			PW_CHANGE,
			PW_UPDATE,
			PW_PERIOD,
			USE_YN,
			INSERT_ID,
			INSERT_DATE,
			CAREER_YN,
			CAREER_START_DATE1,
			CAREER_END_DATE1,
			CAREER_COMPANY1,
			CAREER_POSITION1,
			CAREER_START_DATE2,
			CAREER_END_DATE2,
			CAREER_COMPANY2,
			CAREER_POSITION2,
			CAREER_START_DATE3,
			CAREER_END_DATE3,
			CAREER_COMPANY3,
			CAREER_POSITION3,
			CAREER_START_DATE4,
			CAREER_END_DATE4,
			CAREER_COMPANY4,
			CAREER_POSITION4,
			CAREER_START_DATE5,
			CAREER_END_DATE5,
			CAREER_COMPANY5,
			CAREER_POSITION5,
			MILITARY_CLASS,
			MILITARY_END,
			MILITARY_START_DATE,
			MILITARY_END_DATE,			
			LAST_EDU_NAME,
			LAST_EDU_DEPT,
			LAST_EDU_YEAR,
			LAST_EDU_END
		)VALUES(
			#{userId}
			,#{userNm}
			,#{userPw}
			,'0001'
			,#{eduName}
			,#{eduCode}
			,#{userNmCh}
			,#{userNmEn}
			,#{sex}
			,#{birthDay}
			,#{age}
			,#{address}
			,#{dept}
			,#{position}
			,#{work}
			,#{career1}
			,#{career2}
			,#{career3}
			,#{career4}
			,#{career5}
			,#{militaryCareer}
			,#{registNumber}
			,#{employStatusYn}
			,#{lastEdu}
			,#{writeDate}
			,#{company}
			,#{telNo}
			,#{hpNo}
			,#{email}
			,#{loginStart}
			,#{loginLast}
			,#{pwPrior}
			,#{pwChange}
			,#{pwUpdate}
			,#{pwPeriod}
			,'Y'
			,#{insertId}
			,now()
			,#{careerYn}
			,#{careerStartDate1}
			,#{careerEndDate1}
			,#{careerCompany1}
			,#{careerPosition1}
			,#{careerStartDate2}
			,#{careerEndDate2}
			,#{careerCompany2}
			,#{careerPosition2}
			,#{careerStartDate3}
			,#{careerEndDate3}
			,#{careerCompany3}
			,#{careerPosition3}
			,#{careerStartDate4}
			,#{careerEndDate4}
			,#{careerCompany4}
			,#{careerPosition4}
			,#{careerStartDate5}
			,#{careerEndDate5}
			,#{careerCompany5}
			,#{careerPosition5}
			,#{militaryClass}
			,#{militaryEnd}
			,#{militaryStartDate}
			,#{militaryEndDate}			
			,#{lastEduName}
			,#{lastEduDept}
			,#{lastEduYear}
			,#{lastEduEnd}
		)
	
	</insert>	
	
	
	<!-- 교육생 수정 -->
	<update id="updateTeacher" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">	
		UPDATE XBT_TEACHER_USER SET				
			USER_NM = 		#{userNm},
			USER_PW = 		#{userPw},
			EDU_NAME = 		#{eduName},
			EDU_CODE = 		#{eduCode},
			USER_NM_CH = 		#{userNmCh},
			USER_NM_EN = 		#{userNmEn},
			SEX = 		#{sex},
			BIRTH_DAY = 		#{birthDay},
			AGE = 		#{age},
			ADDRESS = 		#{address},
			DEPT = 		#{dept},
			POSITION = 		#{position},
			WORK = 		#{work},
			CAREER1 = 		#{career1},
			CAREER2 = 		#{career2},
			CAREER3 = 		#{career3},
			CAREER4 = 		#{career4},
			CAREER5 = 		#{career5},
			MILITARY_CAREER = 		#{militaryCareer},
			REGIST_NUMBER = 		#{registNumber},
			EMPLOY_STATUS_YN = 		#{employStatusYn},
			LAST_EDU = 		#{lastEdu},
			WRITE_DATE = 		#{writeDate},
			COMPANY = 		#{company},
			TEL_NO = 		#{telNo},
			HP_NO = 		#{hpNo},
			EMAIL = 		#{email},
			LOGIN_START = 		#{loginStart},
			LOGIN_LAST = 		#{loginLast},
			PW_PRIOR = 		#{pwPrior},
			PW_CHANGE = 		#{pwChange},
			PW_UPDATE = 		#{pwUpdate},
			PW_PERIOD = 		#{pwPeriod},
			USE_YN = 		#{useYn},
			update_id = 		#{updateId},
			update_date = 		now(),
			CAREER_YN = #{careerYn},
			CAREER_START_DATE1 = 	#{careerStartDate1}  ,
			CAREER_END_DATE1 = 	#{careerEndDate1}        ,
			CAREER_COMPANY1 = 	#{careerCompany1}        ,
			CAREER_POSITION1 = 	#{careerPosition1}       ,
			CAREER_START_DATE2 = 	#{careerStartDate2}  ,
			CAREER_END_DATE2 = 	#{careerEndDate2}        ,
			CAREER_COMPANY2 = 	#{careerCompany2}        ,
			CAREER_POSITION2 = 	#{careerPosition2}       ,
			CAREER_START_DATE3 = 	#{careerStartDate3}  ,
			CAREER_END_DATE3 = 	#{careerEndDate3}        ,
			CAREER_COMPANY3 = 	#{careerCompany3}        ,
			CAREER_POSITION3 = 	#{careerPosition3}       ,
			CAREER_START_DATE4 = 	#{careerStartDate4}  ,
			CAREER_END_DATE4 = 	#{careerEndDate4}        ,
			CAREER_COMPANY4 = 	#{careerCompany4}        ,
			CAREER_POSITION4 = 	#{careerPosition4}       ,
			CAREER_START_DATE5 = 	#{careerStartDate5}  ,
			CAREER_END_DATE5 = 	#{careerEndDate5}        ,
			CAREER_COMPANY5 = 	#{careerCompany5}        ,
			CAREER_POSITION5 = 	#{careerPosition5}       ,
			MILITARY_CLASS = 	#{militaryClass}         ,
			MILITARY_END = 	#{militaryEnd}               ,
			MILITARY_START_DATE = 	#{militaryStartDate} ,
			MILITARY_END_DATE = 	#{militaryEndDate}   ,
			LAST_EDU_NAME = 	#{lastEduName}           ,
			LAST_EDU_DEPT = 	#{lastEduDept}           ,
			LAST_EDU_YEAR = 	#{lastEduYear}           ,
			LAST_EDU_END = 	#{lastEduEnd}                
		WHERE USER_ID = 		#{userId}	
	</update>	
	
	<!-- 교육생 삭제-->
	<delete id="deleteTeacher" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">
		DELETE FROM XBT_TEACHER_USER WHERE USER_ID = #{userId}  
	</delete>	
	
	
	<!-- 마스터유저정보 등록 -->
	<insert id="insertUserMaster" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">
		INSERT INTO XBT_USER(
			USER_ID,
			USER_NM,
			USER_PW,
			AUTH_CD,
			DEPT,
			TEL_NO,
			HP_NO,
			EMAIL,
			USE_YN,
			REG_ID,
			REG_DT
		)VALUES(
			#{userId}
			,#{userNm}
			,#{userPw}
			,'0001'
			,#{dept}
			,#{telNo}
			,#{hpNo}
			,#{email}
			,'Y'
			,#{insertId}
			,now()	
		)
	</insert>		
	
	<!-- 마스터유저정보 수정 -->
	<update id="updateUserMaster" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">	
		UPDATE XBT_USER SET				
			USER_NM = 		#{userNm},
			USER_PW = 		#{userPw},
			DEPT = 		#{dept},
			TEL_NO = 		#{telNo},
			HP_NO = 		#{hpNo},
			EMAIL = 		#{email},
			USE_YN = 		#{useYn},
			UPD_ID = 		#{updateId},
			UPD_DT = 		now()            
		WHERE USER_ID = 		#{userId}	
	</update>	
	
	<!-- 마스터유저정보 삭제-->
	<delete id="deleteUserMaster" parameterType="egovframework.com.adm.userMgr.vo.TeacherInfo">
		DELETE FROM XBT_USER WHERE USER_ID = #{userId}  
	</delete>	
	
	
	<!--이수증명서학생목록-->
	<select id="selectCertificationUserList" parameterType="egovframework.com.adm.userMgr.vo.UserCertificate" resultType="egovframework.com.adm.userMgr.vo.UserCertificate" >
		SELECT
			PROC_CD,
			PROC_YEAR,
			PROC_SEQ,
			EDU_CODE,
			EDU_NAME,
			USER_ID,
			USER_NM,
			PRACTICE_SCORE,
			THEORY_SCORE,
			EVALUATION_SCORE,
			PASS_YN,
			EDU_START_DATE,
			EDU_END_DATE,
			ENDING_YN
		FROM
			XBT_BASELINE_STUDENT_INFO
		WHERE USER_ID = #{userId}
		ORDER BY PROC_CD DESC, PROC_SEQ ASC
	</select>	
	
	<!--이수증명서학생-->
	<select id="selectCertificationUser" parameterType="egovframework.com.adm.userMgr.vo.UserCertificateDetail" resultType="egovframework.com.adm.userMgr.vo.UserCertificateDetail" >
		SELECT
			T1.PROC_CD,
			T1.PROC_SEQ,
			T1.EDU_CODE,
			T2.EDU_NAME,
			(SELECT CODE_NAME FROM XBT_COMMON_CODE XCC WHERE GROUP_ID = 'eduName' AND T2.EDU_CODE = CODE_VALUE AND LANGUAGE_CODE = 'en') as EDU_NAME_EN,
			T1.PROC_YEAR,
			T1.USER_ID,	
			T2.USER_NM,	
			T2.USER_NM_EN,
			T2.BIRTH_DAY,
			T2.ADDRESS,
			T1.PRACTICE_SCORE,
			T1.THEORY_SCORE,
			T1.EVALUATION_SCORE,
			T1.ENDING_YN,		
			T1.PASS_YN,			
			T1.EDU_START_DATE,
			T1.EDU_END_DATE,
			date_format(NOW(), '%Y-%m-%d')AS TO_DAY,
			EDU_TIME
		FROM
			XBT_BASELINE_STUDENT_INFO T1 INNER JOIN XBT_STU_USER T2
			ON T1.USER_ID = T2.USER_ID 
		WHERE T1.USER_ID = #{userId}
		AND T1.PROC_CD = #{procCd}
		AND T1.PROC_SEQ = #{procSeq}	
		AND T1.PASS_YN != 'ING'
	</select>	
	
	
	<!--이수증명서 자격증번호 저장 -->
	<select id="selectCertNumber" parameterType="egovframework.com.adm.userMgr.vo.UserCertificateDetail" resultType="egovframework.com.adm.userMgr.vo.UserCertificateDetail" >
			SELECT IFNULL(
				CONCAT(
					'KSSA-',
					DATE_FORMAT(NOW(), '%Y'),
					<choose>
						<when test='eduType == "1"'>
							'-보안-',
						</when>
						<when test='eduType == "2"'>
							'-경비-',
						</when>
					</choose>					
					LPAD(cast(right(IFNULL(MAX(CERTIFICATION_ID), 0), 5) as DECIMAL)+1, 5 , '0')
				), 			
				MAX(CERTIFICATION_ID) 
			) AS certificationId  
			FROM XBT_CERTIFICATION_INFO 
		<choose>
			<when test='eduType == "1"'>
				WHERE EDU_CODE = '1' OR EDU_CODE = '2' OR EDU_CODE = '3'
			</when>
			<when test='eduType == "2"'>
				WHERE EDU_CODE = '4' OR EDU_CODE = '5' OR EDU_CODE = '6'
			</when>
		</choose>
	</select>	
	
	
	
	<!-- 이수증명서 자격증번호 저장 -->
	<insert id="insertCertNumber" parameterType="egovframework.com.adm.userMgr.vo.CertificationInfo">
		INSERT INTO XBT_CERTIFICATION_INFO(
			CERTIFICATION_ID,
			PROC_CD,
			PROC_YEAR,
			PROC_SEQ,
			EDU_CODE,
			EDU_NAME,
			USER_ID,
			USER_NM,
			PRACTICE_SCORE,
			THEORY_SCORE,
			EVALUATION_SCORE,
			EVALUATION_YN,
			PASS_YN,
			EDU_START_DATE,
			EDU_END_DATE,
			ENDING_YN,
			INSERT_DATE,
			INSERT_ID
		)VALUES(
			#{certificationId}
			,#{procCd}
			,#{procYear}
			,#{procSeq}
			,#{eduCode}
			,#{eduName}
			,#{userId}
			,#{userNm}
			,#{practiceScore}
			,#{theoryScore}
			,#{evaluationScore}
			,#{evaluationYn}
			,#{passYn}
			,#{eduStartDate}
			,#{eduEndDate}
			,#{endingYn}
			,now()
			,#{insertId}
		)
	</insert>		
	
	<!-- 얼글등록정보수정 -->
	<update id="updateFaceYn" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_STU_USER SET		
			FACE_YN = 		#{faceYn},
			UPDATE_ID = 		#{updateId},
			UPDATE_DATE = 		now()            
		WHERE USER_ID = 	#{userId}	
	</update>	
	
	<!-- 교육생평가점수 수정 -->
	<update id="deleteBaselineEvaluation" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		DELETE FROM XBT_BASELINE_EVALUATION
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
	</update>	
	
	<!-- 교육생평가점수 수정 -->
	<update id="deleteEvaluationProgressing" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		DELETE FROM XBT_STU_EVALUATION_PROGRESSING 
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
	</update>			
	
	<!-- 교육생평가점수 수정 -->
	<update id="updateEvaluationStudentInfo" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_BASELINE_STUDENT_INFO SET 
		EVALUATION_SCORE = 0 ,
		EVALUATION_YN = 'N',
		ENDING_YN = 'N',
		PASS_YN = 'ING',
		EVALUATION_PASS_YN = 'ING'
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
	</update>	
	
	<!-- 교육생이론점수 수정 -->
	<update id="updateBaselineTheory" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_BASELINE_THEORY SET 
		GAIN_SCORE = 0 ,
		END_YN = 'ING',
		PASS_YN = 'ING'
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}	
	</update>	
	
	<!-- 교육생이론점수 수정 -->
	<update id="deleteTheoryProgressing" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		DELETE FROM XBT_STU_THEORY_PROGRESSING 
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
		AND LAGE_GROUP_CD = (
		SELECT
			EDU_CODE
		FROM
			XBT_STU_USER
		WHERE
			USER_ID = #{userId}
		LIMIT 1
		)
		AND MIDDLE_GROUP_CD IN(
			SELECT CONCAT (T2.EDU_CODE, T1.MENU_CD) 
			FROM XBT_STU_MENU T1, (SELECT EDU_CODE FROM XBT_STU_USER WHERE USER_ID = #{userId})T2 
			WHERE LEARNING_TYPE = 'theory' AND LANGUAGE_CODE = 'kr'		
		)
	</update>			
	
	<!-- 교육생이론점수 수정 -->
	<update id="updateTheoryStudentInfo" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_BASELINE_STUDENT_INFO SET 
		THEORY_SCORE = 0 ,
		THEORY_YN = 'N',
		ENDING_YN = 'N',
		PASS_YN = 'ING',
		THEORY_PASS_YN = 'ING'
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
	</update>	
	
	<!-- 교육생위험물점수 수정 -->
	<update id="updateBaselineDanger" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_BASELINE_THEORY SET 
		DANGER_SCORE = 0 ,
		END_YN = 'ING',
		PASS_YN = 'ING'
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}		
	</update>	
	
	<!-- 교육생위험물점수 수정 -->
	<update id="deleteDangerProgressing" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		DELETE FROM XBT_STU_THEORY_PROGRESSING 
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
		AND LAGE_GROUP_CD = (
		SELECT
			EDU_CODE
		FROM
			XBT_STU_USER
		WHERE
			USER_ID = #{userId}
		LIMIT 1
		)
		AND MIDDLE_GROUP_CD IN(
			SELECT CONCAT (T2.EDU_CODE, T1.MENU_CD) 
			FROM XBT_STU_MENU T1, (SELECT EDU_CODE FROM XBT_STU_USER WHERE USER_ID = #{userId})T2 
			WHERE LEARNING_TYPE = 'danger' AND LANGUAGE_CODE = 'kr'		
		)		
	</update>			
	
	<!-- 교육생위험물점수 수정 -->
	<update id="updateDangerStudentInfo" parameterType="egovframework.com.adm.userMgr.vo.UserInfo">	
		UPDATE XBT_BASELINE_STUDENT_INFO SET 
		DANGER_SCORE = 0 ,
		DANGER_YN = 'N',
		ENDING_YN = 'N',
		PASS_YN = 'ING',
		DANGER_PASS_YN = 'ING'
		WHERE PROC_CD  = #{procCd} 
		AND USER_ID = #{userId}
	</update>	
		
		
	<!-- 차수 교육생 점수조회 -->
	<select id="selectBaselineStudentScore" parameterType="egovframework.com.adm.userMgr.vo.UserBaselineScore" resultType="egovframework.com.adm.userMgr.vo.UserBaselineScore" >
		<choose>
			<when test='command == "evaluation"'>
				SELECT
					PROC_CD,
					(SELECT PROC_NAME  FROM XBT_BASELINE T2 WHERE T2.PROC_CD = T1.PROC_CD)as procNm,
					PROC_YEAR,
					PROC_SEQ,
					USER_ID,
					(SELECT EDU_CODE  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduCode,
					(SELECT EDU_NAME  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduName,
					(SELECT USER_NM  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as userNm,
					MODULE_ID,
					GAIN_SCORE,
					RIGHT_CNT,
					WRONG_CNT,
					RIGHT_CNT+WRONG_CNT AS TOTAL_CNT,
					BAN_CNT,
					END_YN,
					PASS_YN,
					TEST_DATE
				FROM
					XBT_BASELINE_EVALUATION T1
				WHERE 1=1
				<if test='eduCode != "" and eduCode != null'>
				 AND EDU_CODE = #{eduCode}
				</if>
				<if test='procSeq != "" and procSeq != null'>
				 AND PROC_SEQ = #{procSeq}
				</if>				
				ORDER BY PROC_CD DESC, TEST_DATE DESC
			
			</when>
			<when test='command == "theory"'>
				SELECT
					PROC_CD,
					(SELECT PROC_NAME  FROM XBT_BASELINE T2 WHERE T2.PROC_CD = T1.PROC_CD)as procNm,
					PROC_YEAR,
					PROC_SEQ,
					USER_ID,
					(SELECT EDU_CODE  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduCode,
					(SELECT EDU_NAME  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduName,
					(SELECT USER_NM  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as userNm,
					GAIN_SCORE,
					RIGHT_CNT,
					WRONG_CNT,
					RIGHT_CNT+WRONG_CNT AS TOTAL_CNT,
					END_YN,
					PASS_YN,
					TEST_DATE
				FROM
					XBT_BASELINE_THEORY T1
				WHERE 1=1	
				<if test='eduCode != "" and eduCode != null'>
				 AND EDU_CODE = #{eduCode}
				</if>
				<if test='procSeq != "" and procSeq != null'>
				 AND PROC_SEQ = #{procSeq}
				</if>						
					ORDER BY PROC_CD DESC, TEST_DATE DESC				
			</when>
			<when test='command == "danger"'>
				SELECT
					PROC_CD,
					(SELECT PROC_NAME  FROM XBT_BASELINE T2 WHERE T2.PROC_CD = T1.PROC_CD)as procNm,
					PROC_YEAR,
					PROC_SEQ,
					USER_ID,
					(SELECT EDU_CODE  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduCode,
					(SELECT EDU_NAME  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as eduName,
					(SELECT USER_NM  FROM XBT_STU_USER T2 WHERE T2.USER_ID = T1.USER_ID)as userNm,
					DANGER_SCORE as gainScore,
					DANGER_RIGHT_CNT as rightCnt,
					DANGER_WRONG_CNT as wrongCnt,
					DANGER_RIGHT_CNT+DANGER_WRONG_CNT AS TOTAL_CNT,
					END_YN,
					PASS_YN,
					TEST_DATE
				FROM
					XBT_BASELINE_THEORY T1
				WHERE 1=1	
				<if test='eduCode != "" and eduCode != null'>
				 AND EDU_CODE = #{eduCode}
				</if>
				<if test='procSeq != "" and procSeq != null'>
				 AND PROC_SEQ = #{procSeq}
				</if>						
					ORDER BY PROC_CD DESC, TEST_DATE DESC				
			</when>
		</choose>						
	</select>
	
	
	<!--이수증명서학생목록-->
	<select id="selectMenuPinList" parameterType="egovframework.com.adm.userMgr.vo.MenuPin" resultType="egovframework.com.adm.userMgr.vo.MenuPin" >
		SELECT
			PWD_NO,
			PIN_TITLE,
			PINKEY,
			PIN_NUMBER,
			MEMO,
			INSERT_ID,
			INSERT_DATE,
			UPDATE_ID,
			UPDATE_DATE
		FROM
			XBT_MENU_PIN
		ORDER BY INSERT_DATE DESC, UPDATE_DATE DESC
	</select>		
	
	<!-- 메뉴별 핀번호 등록 -->
	<insert id="insertMenuPin" parameterType="egovframework.com.adm.userMgr.vo.MenuPin">
		INSERT INTO corpjun22.XBT_MENU_PIN(
			PIN_TITLE
			, PINKEY
			, PIN_NUMBER
			, INSERT_ID
			, INSERT_DATE
		)VALUES(
			#{pinTitle}
			,#{pinkey}
			,#{pinNumber}
			,#{insertId}
			,now()
		)
	</insert>	
	
	<!-- 메뉴별 핀번호 수정 -->
	<update id="updateMenuPin" parameterType="egovframework.com.adm.userMgr.vo.MenuPin">
		UPDATE
			XBT_MENU_PIN
		SET
			PINKEY = #{pinkey},
			PIN_NUMBER = #{pinNumber},
			UPDATE_ID = #{updateId},
			UPDATE_DATE = now()
		WHERE
			PIN_TITLE = #{pinTitle}
	</update>	
	
	<!-- 메뉴핀확인 -->
	<select id="selectCheckMenuPin" parameterType="egovframework.com.adm.userMgr.vo.MenuPin" resultType="int">
		SELECT
			count(PWD_NO)
		FROM
			XBT_MENU_PIN
		WHERE
			CONCAT(PINKEY, PIN_NUMBER) = #{pinNumber}
			AND PIN_TITLE = #{pinTitle}		
	</select>			
			
</mapper>