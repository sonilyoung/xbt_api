<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.com.stu.main.dao.MainDAO">
	
	
	<!-- 메인사용자정보 -->
	<select id="selectBaselineUserInfo" parameterType="egovframework.com.stu.main.vo.UserStInfo" resultType="egovframework.com.stu.main.vo.UserStInfo">
		SELECT
			T1.STUDENT_NO,
			T2.PROC_CD,
			T2.PROC_NAME AS PROC_NM,
			T1.PROC_YEAR,
			T1.PROC_SEQ,
			T1.USER_ID,
			T1.USER_NM,
			T1.PROC_NM,
			T1.COMP_NM,
			T1.DEPT_NM,
			T1.GAIN_SCORE,
			T1.PASS_YN,
			T1.ENDING_PROCESS_DATE,
			T1.EDU_START_DATE,
			T1.EDU_END_DATE,
			T1.ENDING_YN,
			T1.INSERT_DATE,
			T1.INSERT_ID,
			T1.UPDATE_DATE,
			T1.UPDATE_ID
		FROM
			XBT_BASELINE_STUDENT_INFO T1 INNER JOIN XBT_BASELINE T2
			ON T1.USER_ID = #{userId} 
			AND T1.PROC_CD = T2.PROC_CD
			AND date_format(NOW(), '%Y-%m-%d') BETWEEN T2.EDU_START_DATE AND T2.EDU_END_DATE
			LIMIT 1
	</select>	
	
	<!-- 일정목록 메뉴목록정보 -->
	<select id="selectDefaultMenu" parameterType="egovframework.com.stu.main.vo.Schedule" resultType="egovframework.com.stu.main.vo.Schedule">
		SELECT 
			T1.MENU_NO,
			T1.P_MENU_CD,
			T1.MENU_CD,
			T1.MENU_NAME,
			T1.MENU_URL,
			T1.MENU_LEVEL,
			T1.USE_YN,
			T1.MENU_ORDER,
			(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_ID,
			(SELECT MAX(MODULE_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_TYPE,
			(SELECT MAX(LEARNING_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS LEARNING_TYPE,
			'false' AS menuFlag
		FROM XBT_STU_MENU T1 
		WHERE LANGUAGE_CODE = #{languageCode}
		AND P_MENU_CD = #{pMenuCd}
		AND T1.USE_YN = 'Y' 
		AND T1.MENU_CD = #{menuCd}
		LIMIT 1
	</select>	
	
	
	<!-- 일정목록 메뉴목록정보 -->
	<select id="selectScheduleList" parameterType="egovframework.com.stu.main.vo.Schedule" resultType="egovframework.com.stu.main.vo.Schedule">
		<!-- SELECT 
				T1.MENU_NO,
				T1.MENU_URL,
				T1.P_MENU_CD,
				T2.MENU_CD,
				T1.MENU_NAME,
				T1.MENU_URL,
				T1.MENU_LEVEL,
				T1.USE_YN,
				T1.MENU_ORDER,
				'' AS MODULE_ID,
				'' AS MODULE_TYPE,
				'' AS EDU_TYPE
		FROM XBT_STU_MENU_MASTER T1 INNER JOIN XBT_STU_MENU_DETAIL T2
		ON T1.MENU_NO = T2.MENU_CD
		WHERE T2.LANGUAGE_CODE =  #{languageCode}
		AND P_MENU_CD = #{pMenuCd} AND MENU_LEVEL = '0'
		UNION ALL  -->
	<![CDATA[	
	SELECT TOT.* FROM (
		SELECT 
			T1.MENU_NO,
			T1.P_MENU_CD,
			T1.MENU_CD,
			T1.MENU_NAME,
			T1.MENU_URL,
			T1.MENU_LEVEL,
			T1.USE_YN,
			T1.MENU_ORDER,
			(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_ID,
			(SELECT MAX(MODULE_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS MODULE_TYPE,
			(SELECT MAX(LEARNING_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T1.MENU_CD) AS LEARNING_TYPE,
			'false' AS menuFlag
		FROM XBT_STU_MENU T1 
		WHERE LANGUAGE_CODE = #{languageCode}
		AND P_MENU_CD = #{pMenuCd}
		AND T1.USE_YN = 'Y' 
    	AND T1.MENU_CD NOT IN (
	    	SELECT 
	    		DISTINCT MENU_CD 
	    	FROM XBT_BASELINE_EDU_DATE 
	    	WHERE 
	    		date_format(NOW(), '%Y-%m-%d') BETWEEN EDU_START_DATE AND EDU_END_DATE 
	    		AND USER_ID = #{userId}
    	)   
		UNION ALL
		SELECT 
			T2.MENU_NO,
			T2.P_MENU_CD,
			T2.MENU_CD,
			T2.MENU_NAME,
			T2.MENU_URL,
			T2.MENU_LEVEL,
			T2.USE_YN,
			T2.MENU_ORDER,
			(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS MODULE_ID,
			(SELECT MAX(MODULE_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS MODULE_TYPE,
			(SELECT MAX(LEARNING_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS LEARNING_TYPE,
			'true' AS menuFlag
		FROM XBT_STU_MENU T2 
		WHERE LANGUAGE_CODE = #{languageCode}
		AND P_MENU_CD = #{pMenuCd}
		AND T2.USE_YN = 'Y'
    	AND T2.MENU_CD IN (
	    	SELECT 
	    		DISTINCT MENU_CD 
	    	FROM XBT_BASELINE_EDU_DATE 
	    	WHERE 
	    		date_format(NOW(), '%Y-%m-%d') BETWEEN EDU_START_DATE AND EDU_END_DATE 
	    		AND USER_ID = #{userId}	    	
	    )       	
	)TOT ORDER BY P_MENU_CD, MENU_ORDER ASC    	
	]]>		
	</select>

	<!-- 교육정보통계타이틀 -->
	<select id="selectStatisticsMainTitleList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT 
			PROC_YEAR , 
			PROC_SEQ , 
			STUDY_LVL ,			
			TEST_DATE,
			(CASE WHEN PASS_YN = 'Y' THEN 'Pass' ELSE 'Fail' END)AS passYn ,
			GAIN_SCORE,
			(SELECT PASS_SCORE FROM XBT_BASELINE T1 WHERE T1.PROC_CD= T2.PROC_CD)AS passScore
		FROM XBT_BASELINE_LEARNING T2
		WHERE USER_ID = #{userId}
		GROUP BY PROC_CD , PROC_YEAR , PROC_SEQ, STUDY_LVL
		ORDER BY PROC_YEAR ,PROC_SEQ DESC, TRY_SEQ DESC 	
	</select>	

	<!-- 교육정보통계데이터 -->
	<select id="selectStatisticsContensList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT PROC_YEAR , PROC_SEQ , STUDY_LVL , GAINSCORE/TOT_CNT AS gainScore FROM (
			SELECT 
				PROC_YEAR , PROC_SEQ , STUDY_LVL , SUM(GAIN_SCORE) AS gainScore, COUNT(GAIN_SCORE)AS TOT_CNT
			FROM XBT_BASELINE_LEARNING
			WHERE USER_ID =  #{userId}
			GROUP BY PROC_CD , PROC_YEAR , PROC_SEQ
		)TOT ORDER BY PROC_YEAR ,PROC_SEQ DESC
	</select>	
	
	<!-- 교육정보통계타이틀 -->
	<select id="selectStatisticsTitleList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT 
			PROC_YEAR , 
			PROC_SEQ , 
			STUDY_LVL ,
			TRY_SEQ, 
			TEST_DATE,
			(CASE WHEN PASS_YN = 'Y' THEN 'Pass' ELSE 'Fail' END)AS passYn ,
			GAIN_SCORE,
			(SELECT MODULE_NM FROM XBT_MODULE_INFO_MASTER T1 WHERE T1.MODULE_ID= T2.MODULE_ID)AS moduleName,
			(SELECT PASS_SCORE FROM XBT_BASELINE T1 WHERE T1.PROC_CD= T2.PROC_CD)AS passScore
		FROM XBT_BASELINE_LEARNING T2
		WHERE USER_ID = #{userId}
		GROUP BY MODULE_ID, PROC_CD , PROC_YEAR , PROC_SEQ, STUDY_LVL,TRY_SEQ
		ORDER BY PROC_YEAR ,PROC_SEQ DESC, TRY_SEQ DESC
	</select>	
	
	<!-- 오답통계정보데이터 -->
	<select id="selectStatisticsWrongAnswerList1" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT COUNT(UNIT_GROUP_CD)AS total, UNIT_GROUP_CD, UNIT_GROUP_NAME FROM (
			SELECT * FROM (
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD,
				(SELECT GROUP_NAME FROM XBT_UNIT_GROUP xug WHERE UNIT_GROUP_CD = (SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID)) AS UNIT_GROUP_NAME
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 INNER JOIN XBT_BAG_INFO T4
				ON T3.BAG_SCAN_ID = T4.BAG_SCAN_ID
				AND USER_ID = #{userId} 		
				AND END_YN = 'Y'
				ORDER BY UNIT_GROUP_CD 	
			)TMP WHERE UNIT_GROUP_CD IN (SELECT UNIT_GROUP_CD from XBT_UNIT_GROUP WHERE USE_YN = 'Y')
		)TOT GROUP BY UNIT_GROUP_CD , UNIT_GROUP_NAME	
	</select>	
	
	<!-- 오답통계정보데이터 (평균)-->
	<select id="selectStatisticsWrongAnswerList2" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT COUNT(UNIT_GROUP_CD)AS total, UNIT_GROUP_CD, UNIT_GROUP_NAME FROM (
			SELECT * FROM (
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD,
				(SELECT GROUP_NAME FROM XBT_UNIT_GROUP xug WHERE UNIT_GROUP_CD = (SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID)) AS UNIT_GROUP_NAME
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 INNER JOIN XBT_BAG_INFO T4
				ON T3.BAG_SCAN_ID = T4.BAG_SCAN_ID
				AND T3.ACTION_DIV != T3.USER_ACTION_DIV 		
				AND END_YN = 'Y'
				ORDER BY UNIT_GROUP_CD 	
			)TMP WHERE UNIT_GROUP_CD IN (SELECT UNIT_GROUP_CD from XBT_UNIT_GROUP WHERE USE_YN = 'Y')
		)TOT GROUP BY UNIT_GROUP_CD , UNIT_GROUP_NAME	
	</select>
	
	<!-- 오답통계정보데이터 (오답)-->
	<select id="selectStatisticsWrongAnswerList3" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT COUNT(UNIT_GROUP_CD)AS total, UNIT_GROUP_CD, UNIT_GROUP_NAME FROM (
			SELECT * FROM (
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD,
				(SELECT GROUP_NAME FROM XBT_UNIT_GROUP xug WHERE UNIT_GROUP_CD = (SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID)) AS UNIT_GROUP_NAME
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 INNER JOIN XBT_BAG_INFO T4
				ON T3.BAG_SCAN_ID = T4.BAG_SCAN_ID
				AND USER_ID = #{userId}
				AND T3.ACTION_DIV != T3.USER_ACTION_DIV 		
				AND END_YN = 'Y'
				ORDER BY UNIT_GROUP_CD 	
			)TMP WHERE UNIT_GROUP_CD IN (SELECT UNIT_GROUP_CD from XBT_UNIT_GROUP WHERE USE_YN = 'Y')
		)TOT GROUP BY UNIT_GROUP_CD , UNIT_GROUP_NAME	
	</select>
</mapper>